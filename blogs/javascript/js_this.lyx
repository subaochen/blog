#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass ctex-article
\begin_preamble
%%%%%%%%%%%%%%%%%%                                                                                                                                                           

%中文断行
\XeTeXlinebreaklocale "zh"
\XeTeXlinebreakskip = 0pt plus 1pt 

% 标题左对齐
\usepackage[raggedright]{titlesec} 

% 页边距设置
\usepackage[top=1.2in,bottom=1.2in,left=1.2in,right=1in]{geometry}
% 页眉页脚设置
\usepackage{fancyhdr}
\pagestyle{fancy}
\fancyhf{}                                                  % 清空页眉页脚
\fancyhead[LE,RO]{\thepage}                                 % 偶数页左,奇数页右
\fancyhead[RE]{\leftmark}                                   % 偶数页右
\fancyhead[LO]{\rightmark}                                  % 奇数页左
\fancypagestyle{plain}{
    \fancyhf{}                                                  % 重定义plain页面样式
    \renewcommand{\headrulewidth}{0pt}
}


\usepackage{listings}
\usepackage{color}
\definecolor{hellgelb}{rgb}{1,1,0.85}
\definecolor{colKeys}{rgb}{0,0,1}
\definecolor{colIdentifier}{rgb}{0,0,0}
\definecolor{colComments}{rgb}{1,0,0}
\definecolor{colString}{rgb}{0,0.5,0}
\AtBeginDocument{\renewcommand\lstlistingname{代码清单}}

 
\lstset{%
        language=Java,%
        float=hbp,%
        basicstyle=\footnotesize\ttfamily,%
        identifierstyle=\color{colIdentifier},%
        keywordstyle=\color{colKeys},%
        stringstyle=\color{colString},%
        commentstyle=\itshape\color{colComments},%
        columns=fixed,
        tabsize=4,%
        frame=tb,% 顶部和底部加横线
        %frame=shadowbox,
        framerule=1pt,
        framexleftmargin=2em, % 行号包含在代码区域内
        extendedchars=false,%这一条命令可以解决代码跨页时，章节标题，页眉等汉字不显示的问题                                                                              
        showspaces=false,%
        showstringspaces=false,%
        numbers=left,%
        numberstyle=\tiny\ttfamily,%
        numbersep=1em,%
        breaklines=true,%
        breakindent=10pt,%
        backgroundcolor=\color{hellgelb},%
        breakautoindent=true,%
        captionpos=t,%
        xleftmargin=1em,%
        xrightmargin=\fboxsep,
        escapechar=|
} 


\usepackage{tikz}
\usepackage{ifthen}
\usepackage{alltt}
% Optional PGF libraries
\usepackage{pgflibraryarrows}
\usepackage{pgflibrarysnakes}

%% Style commands
\newcommand{\func}[1]{\texttt{#1}}
\newcommand{\key}[1]{\texttt{#1}}
\newcommand{\type}[1]{\texttt{#1}}
\newcommand{\prog}[1]{\texttt{#1}}
\newcommand{\flag}[1]{\textit{#1}}
\newcommand{\dir}[1]{\texttt{#1}}
\newcommand{\file}[1]{\texttt{#1}}
\newcommand{\var}[1]{\texttt{#1}}
\newcommand{\rem}[1]{\texttt{\textit{#1}}}
\newcommand{\package}[1]{{\textit{#1}}}

% 用于显示终端命令的执行结果
\newenvironment{display}{\def\FrameCommand{\hskip\parindent}%%
\MakeFramed{\advance\hsize-\width\FrameRestore}%%
\vspace*{-2ex}\small\begin{alltt}}%
{\end{alltt}\vspace*{-2ex}\endMakeFramed}

\newenvironment{lbar}[1][]{%
\def\FrameCommand{\rightskip=\parindent\hskip\parindent\vrule width 1pt \hspace{10pt}}%
\MakeFramed{\rightskip=\parindent\advance\hsize-\width\FrameRestore\noindent\hskip-0.6ex}%
{%
\ifthenelse{\equal{#1}{}}{}{\hskip0.6ex\normalfont\myfamily\myheadseries{#1}\\\\}}%
}%
{\endMakeFramed}

% 显示一个向左的箭头
\newcommand{\coderemark}[1]{\sffamily\normalfont\qquad$\leftarrow \textit{\footnotesize #1}$}
\end_preamble
\use_default_options true
\begin_modules
logicalmkup
multicol
notice
coderemarks
\end_modules
\maintain_unincluded_children false
\language chinese-simplified
\language_package default
\inputencoding utf8-plain
\fontencoding global
\font_roman 新宋体
\font_sans 新宋体
\font_typewriter 新宋体
\font_math auto
\font_default_family default
\use_non_tex_fonts true
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format pdf4
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\boxbgcolor #dad3d7
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 2
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
《YDKJS:this & object prototypes》读书笔记
\end_layout

\begin_layout Section
正解this
\begin_inset Foot
status open

\begin_layout Plain Layout
大部分例子来自《You Don't Know JS:this & object prototypes》
\end_layout

\end_inset


\end_layout

\begin_layout Standard
函数内的this是一个指针，指向了该函数的
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
调用者
\end_layout

\end_inset

（call-site
\begin_inset CommandInset citation
LatexCommand cite
after "2.1"
key "ydkjs-this-object-prototypes"

\end_inset

）。因此this是一个
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
动态的绑定，而非静态的声明
\end_layout

\end_inset

。
\end_layout

\begin_layout Standard
正确理解和找到this的动态绑定有时不是一件显而易见的事情，学会调试JavaScript应用程序也许会有帮助
\begin_inset CommandInset citation
LatexCommand cite
key "nodejs-debug-tutorial"

\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "nodejs-debugger"

\end_inset

。
\end_layout

\begin_layout Section
this绑定的规则
\end_layout

\begin_layout Standard
由于 this是一个动态绑定的指针，那么this的绑定是按照什么原则确定的呢？根本的原则是：
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
在call trace中当前函数的上一个函数即为this
\end_layout

\end_inset

。具体来说有四种情况，优先级由高到低分别是：default binding,implicit binding,implicit lost binding,exp
licit binding
\begin_inset Note Note
status open

\begin_layout Plain Layout
really?
\end_layout

\end_inset

。
\end_layout

\begin_layout Subsection
default binding
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "/home/subaochen/git/blog/src/js/this_default_binding.js"
lstparams "caption={default binding},label={default binding}"

\end_inset


\end_layout

\begin_layout Standard
显然在这个例子中
\begin_inset Foot
status open

\begin_layout Plain Layout
此段代码如果在nodejs中执行，需要去掉变量a前面的var。JS在这里有个坑，参见http://stackoverflow.com/questions/1985
0234/node-js-variable-declaration-and-scope。简单的说，nodejs将每个js文件封装在自己的module
 scope中执行，因此在nodejs的js文件中使用var声明的变量其实不是全局变量，这和在chrome console中的情形不同。因此，在nodejs中使
用this是一个需要更加谨慎对待的事情。
\end_layout

\end_inset

，调用函数foo的是js engine（js engine为每一个js应用程序自动创建和维护了一个global object，比如浏览器的window对象），即
this指向global object，自然this.a会从global object的属性列表中查找。而var a = 2;即创建了一个global
 object的属性a。
\end_layout

\begin_layout Subsection
implicit binding
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "/home/subaochen/git/blog/src/js/this_implicit_binding.js"
lstparams "caption={implicit binding},label={implicit binding}"

\end_inset


\end_layout

\begin_layout Standard
在代码清单
\begin_inset CommandInset ref
LatexCommand ref
reference "implicit binding"

\end_inset

中，obj对象是函数foo的call-site
\begin_inset Note Note
status open

\begin_layout Plain Layout
在这里插入call trace更能够说明问题。如何获得nodejs环境的call trace？
\end_layout

\end_inset

，因此函数foo中的this指向obj对象，this.a等同于obj.a。
\end_layout

\begin_layout Subsection
implicitly lost binding
\begin_inset Foot
status open

\begin_layout Plain Layout
此段代码如果在nodejs中执行，需要去掉变量a前面的var。JS在这里有个坑，参见http://stackoverflow.com/questions/1985
0234/node-js-variable-declaration-and-scope
\end_layout

\end_inset


\end_layout

\begin_layout Standard
在参数的传递过程中，JS编译器最终的解释是去掉了中间的链条，因此在代码清单
\begin_inset CommandInset ref
LatexCommand ref
reference "implicit lost binding"

\end_inset

中，bar最终其实是foo的一个引用，而bar是global scope的，因此this指向global object。
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "/home/subaochen/git/blog/src/js/this_implicitly_lost_binding.js"
lstparams "caption={implicit lost binding},label={implicit lost binding}"

\end_inset


\end_layout

\begin_layout Subsection
explicit binding
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "/home/subaochen/git/blog/src/js/this_explicit_binding.js"
lstparams "caption={explicit binding},label={explicit binding}"

\end_inset


\end_layout

\begin_layout Standard
利用call/apply明确指定了this，因此称为hard binding。
\end_layout

\begin_layout Subsection
hard binding
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "/home/subaochen/git/blog/src/js/this_hard_binding.js"
lstparams "caption={hard binding},label={hard binding}"

\end_inset


\end_layout

\begin_layout Standard
通过创建一个方法bar封装foo.call(obj)，使得任何时候调用方法bar实际上都明确了：this指向obj，这通常也是我们希望的结果。
\end_layout

\begin_layout Standard
由于hard binding如此有效和常用，ES5增加了一个bind方法可以直接使用，在ES5之前可以很容易的模拟bind方法：
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "/home/subaochen/git/blog/src/js/this_hard_binding2.js"

\end_inset


\end_layout

\begin_layout Standard
\start_of_appendix
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "/home/subaochen/git/bibref/javascript"
options "IEEEtranS"

\end_inset


\end_layout

\end_body
\end_document
