#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass ctex-article
\begin_preamble
%%%%%%%%%%%%%%%%%%                                                                                                                                                           

%中文断行
\XeTeXlinebreaklocale "zh"
\XeTeXlinebreakskip = 0pt plus 1pt 

% 标题左对齐
\usepackage[raggedright]{titlesec} 

% 页边距设置
\usepackage[top=1.2in,bottom=1.2in,left=1.2in,right=1in]{geometry}
% 页眉页脚设置
\usepackage{fancyhdr}
\pagestyle{fancy}
\fancyhf{}                                                  % 清空页眉页脚
\fancyhead[LE,RO]{\thepage}                                 % 偶数页左,奇数页右
\fancyhead[RE]{\leftmark}                                   % 偶数页右
\fancyhead[LO]{\rightmark}                                  % 奇数页左
\fancypagestyle{plain}{
    \fancyhf{}                                                  % 重定义plain页面样式
    \renewcommand{\headrulewidth}{0pt}
}


\usepackage{listings}
\usepackage{color}
\definecolor{hellgelb}{rgb}{1,1,0.85}
\definecolor{colKeys}{rgb}{0,0,1}
\definecolor{colIdentifier}{rgb}{0,0,0}
\definecolor{colComments}{rgb}{1,0,0}
\definecolor{colString}{rgb}{0,0.5,0}
\AtBeginDocument{\renewcommand\lstlistingname{代码清单}}

 
\lstset{%
        language=Java,%
        float=hbp,%
        basicstyle=\footnotesize\ttfamily,%
        identifierstyle=\color{colIdentifier},%
        keywordstyle=\color{colKeys},%
        stringstyle=\color{colString},%
        commentstyle=\itshape\color{colComments},%
        columns=fixed,
        tabsize=4,%
        frame=tb,% 顶部和底部加横线
        %frame=shadowbox,
        framerule=1pt,
        framexleftmargin=2em, % 行号包含在代码区域内
        extendedchars=false,%这一条命令可以解决代码跨页时，章节标题，页眉等汉字不显示的问题                                                                              
        showspaces=false,%
        showstringspaces=false,%
        numbers=left,%
        numberstyle=\tiny\ttfamily,%
        numbersep=1em,%
        breaklines=true,%
        breakindent=10pt,%
        backgroundcolor=\color{hellgelb},%
        breakautoindent=true,%
        captionpos=t,%
        xleftmargin=1em,%
        xrightmargin=\fboxsep,
        escapechar=|
} 


\usepackage{tikz}
\usepackage{ifthen}
\usepackage{alltt}
% Optional PGF libraries
\usepackage{pgflibraryarrows}
\usepackage{pgflibrarysnakes}

%% Style commands
\newcommand{\func}[1]{\texttt{#1}}
\newcommand{\key}[1]{\texttt{#1}}
\newcommand{\type}[1]{\texttt{#1}}
\newcommand{\prog}[1]{\texttt{#1}}
\newcommand{\flag}[1]{\textit{#1}}
\newcommand{\dir}[1]{\texttt{#1}}
\newcommand{\file}[1]{\texttt{#1}}
\newcommand{\var}[1]{\texttt{#1}}
\newcommand{\rem}[1]{\texttt{\textit{#1}}}
\newcommand{\package}[1]{{\textit{#1}}}

% 用于显示终端命令的执行结果
\newenvironment{display}{\def\FrameCommand{\hskip\parindent}%%
\MakeFramed{\advance\hsize-\width\FrameRestore}%%
\vspace*{-2ex}\small\begin{alltt}}%
{\end{alltt}\vspace*{-2ex}\endMakeFramed}

\newenvironment{lbar}[1][]{%
\def\FrameCommand{\rightskip=\parindent\hskip\parindent\vrule width 1pt \hspace{10pt}}%
\MakeFramed{\rightskip=\parindent\advance\hsize-\width\FrameRestore\noindent\hskip-0.6ex}%
{%
\ifthenelse{\equal{#1}{}}{}{\hskip0.6ex\normalfont\myfamily\myheadseries{#1}\\\\}}%
}%
{\endMakeFramed}

% 显示一个向左的箭头
\newcommand{\coderemark}[1]{\sffamily\normalfont\qquad$\leftarrow \textit{\footnotesize #1}$}
\end_preamble
\use_default_options true
\begin_modules
logicalmkup
multicol
notice
coderemarks
\end_modules
\maintain_unincluded_children false
\language chinese-simplified
\language_package default
\inputencoding utf8-plain
\fontencoding global
\font_roman 新宋体
\font_sans 新宋体
\font_typewriter 新宋体
\font_math auto
\font_default_family default
\use_non_tex_fonts true
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format pdf4
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\boxbgcolor #dad3d7
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 2
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
deltaspike中的页面导航
\end_layout

\begin_layout Section
type safe view config
\end_layout

\begin_layout Standard
在JSF中，大家习惯在face-config.xml中设置导航规则，而deltaspike提供了type-safe的页面导航设置方法。这里的关键词是type
 safe，按照deltaspike自己的说法，type safe的view config有如下的好处：
\end_layout

\begin_layout Itemize
It is type-safe
\end_layout

\begin_deeper
\begin_layout Itemize
the Java compiler ensures that you do not have typos at the final usages
 (and the rest can be checked during bootstrapping of the application)
\end_layout

\begin_layout Itemize
you can benefit from the auto.complete features of any modern Java IDE.
\end_layout

\end_deeper
\begin_layout Itemize
If you change the name of a file/folder, you need only one (easy) code-change
 in a single place and your (standard Java-) IDE will do the rest for you
 (= update all usages) without a special plug-in
\end_layout

\begin_layout Itemize
It is possible to restrict the navigation target → you can ensure that the
 navigation target is still the intended one (e.g.
 after a refactoring)
\end_layout

\begin_layout Itemize
You can configure meta-data in a central place (which can get inherited
 via multiple inheritance based on Java interfaces)
\end_layout

\begin_layout Itemize
Easier for developers to find usages
\end_layout

\begin_layout Itemize
Allows easy(er) refactorings and maintenance
\end_layout

\begin_layout Itemize
You can use your IDE more efficiently especially in large projects (there
 are some users who initially switched to it, because their tools for displaying
 the config they had before open large config files very slowly…​)
\end_layout

\begin_layout Itemize
Modern Java IDEs show inheritance of interfaces and classes in a nice way.
 Since the view-config is based on standard classes and interfaces, you
 can benefit from it easily.
\end_layout

\begin_layout Standard
deltaspike中，使用接口来表示路径（Folder），使用类来表示具体的页面（view），一个简单的页面布局类似于下面的文件：
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public interface Pages implements ViewConfig
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

    class Index implements Pages { }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    interface Admin extends ViewConfig
\end_layout

\begin_layout Plain Layout

    {
\end_layout

\begin_layout Plain Layout

        class Index implements Admin { }
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
好用不好用，试过才知道，下面通过一个具体的实例看一下deltaspike的type safe view config能否解决页面导航的基本问题，参见：
\begin_inset CommandInset href
LatexCommand href
name "https://github.com/subaochen/deltaspike-tutorial"
target "https://github.com/subaochen/deltaspike-tutorial"

\end_inset

中的page-nav。
\end_layout

\begin_layout Section
如何表示网站的首页？
\end_layout

\begin_layout Standard
定义一个根目录下面的RootPages interface，设置Folder属性为“/”即可：
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

@Folder(name="/")
\end_layout

\begin_layout Plain Layout

public interface RootPages extends ViewConfig {
\end_layout

\begin_layout Plain Layout

    public class Index implements RootPages{}
\end_layout

\begin_layout Plain Layout

    public class Other implements RootPages{}
\end_layout

\begin_layout Plain Layout

    
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Section
如何定义默认出错页面？
\end_layout

\begin_layout Standard
首先要定义一个出错页面，deltaspike已经为我们创建一个模板，因此直接继承下来即可：
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

    @View(name="error")
\end_layout

\begin_layout Plain Layout

    public class ErrorPage extends DefaultErrorView {}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
然后在业务逻辑处理代码中，可以直接使用这个模板即可，deltaspike会自动根据上面的页面定义找到我们的默认出错页面：
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

    public Class<? extends ViewConfig> toErrorPage(){
\end_layout

\begin_layout Plain Layout

        // 直接使用DefaultErrorView即可，无需记住真正的出错页面的名字
\end_layout

\begin_layout Plain Layout

        return DefaultErrorView.class;
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\end_inset


\end_layout

\begin_layout Section
如何设置页面跳转为redirect？
\end_layout

\begin_layout Standard
在合适的位置（可以继承）这样设置，注意到navigation=REDIRECT：
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

@View(navigation=REDIRECT)
\end_layout

\begin_layout Plain Layout

@Folder(name="/admin")
\end_layout

\begin_layout Plain Layout

public interface AdminPages extends ViewConfig{
\end_layout

\begin_layout Plain Layout

    public class Index implements AdminPages {}
\end_layout

\begin_layout Plain Layout

    
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Section
在页面中如何根据特定条件实现页面跳转？
\end_layout

\begin_layout Standard
在后台Bean实现这个特定的业务逻辑即可，有两种基本的方法可以进行页面跳转：
\end_layout

\begin_layout Enumerate
直接在业务逻辑方法中返回ViewConfig类型的对象（即页面）。
\end_layout

\begin_layout Enumerate
通过ViewNavigationHandler帮助进行跳转。
\end_layout

\begin_layout Standard
比如在DemoBean中演示了两种方法：
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

@Model
\end_layout

\begin_layout Plain Layout

public class DemoBean {
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    @Inject
\end_layout

\begin_layout Plain Layout

    private ViewNavigationHandler viewNavigationHandler;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    private void doSomeThing() {
\end_layout

\begin_layout Plain Layout

        // do something here
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    public Class<? extends ViewConfig> toOtherPage() {
\end_layout

\begin_layout Plain Layout

        doSomeThing();
\end_layout

\begin_layout Plain Layout

        return RootPages.Other.class;
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    public void toAdminPage() {
\end_layout

\begin_layout Plain Layout

        viewNavigationHandler.navigateTo(AdminPages.Index.class);
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_body
\end_document
