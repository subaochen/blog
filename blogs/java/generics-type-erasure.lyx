#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass ctex-article
\begin_preamble
\input{/home/subaochen/git/writing-common/article-preamble.tex}
\end_preamble
\use_default_options true
\begin_modules
theorems-bytype
theorems-chap-bytype
coderemarks
note-inset
tip-inset
warning-inset
logicalmkup
\end_modules
\maintain_unincluded_children false
\language chinese-simplified
\language_package default
\inputencoding utf8-plain
\fontencoding global
\font_roman "default" "新宋体"
\font_sans "default" "新宋体"
\font_typewriter "default" "新宋体"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts true
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format pdf4
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\boxbgcolor #d8daeb
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 2
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Java泛型的类型擦除
\end_layout

\begin_layout Standard
Java泛型这个特性是从JDK 1.5才开始加入的，因此为了兼容之前的版本，Java泛型的实现采取了“伪泛型”的策略，即Java在语法上支持泛型，但是在编译阶段会
进行所谓的“类型擦除”（Type Erasure），将所有的泛型表示（尖括号中的内容）都替换为具体的类型（其对应的原生态类型），就像完全没有泛型一样。理解类型擦
除对于用好泛型是很有帮助的，尤其是一些看起来“疑难杂症”的问题，弄明白了类型擦除也就迎刃而解了。
\end_layout

\begin_layout Standard
泛型的类型擦除原则是：
\end_layout

\begin_layout Itemize
消除类型参数声明，即删除<>及其包围的部分。
\end_layout

\begin_layout Itemize
根据类型参数的上下界推断并替换所有的类型参数为原生态类型：如果类型参数是无限制通配符或没有上下界限定则替换为Object，如果存在上下界限定则根据子类替换原则
\begin_inset Note Note
status open

\begin_layout Plain Layout
此处插入子类替换原则的引用
\end_layout

\end_inset

取类型参数的最左边限定类型（即父类）。
\end_layout

\begin_layout Itemize
为了保证类型安全，必要时插入强制类型转换代码。
\end_layout

\begin_layout Itemize
自动产生“桥接方法”以保证擦除类型后的代码仍然具有泛型的“多态性”。
\begin_inset Note Note
status open

\begin_layout Plain Layout
似乎有问题？
\end_layout

\end_inset


\end_layout

\begin_layout Section
擦除类定义中的类型参数
\end_layout

\begin_layout Subsection
无限制类型擦除
\end_layout

\begin_layout Standard
当类定义中的类型参数没有任何限制时，在类型擦除中直接被替换为Object，即形如<T>和<?>的类型参数都被替换为Object，参见
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
figurename
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:擦除类定义中的类型参数"

\end_inset

。
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename /home/subaochen/git/blog/imgs/java/type-erasure-class.eps
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
擦除类定义中的类型参数
\begin_inset CommandInset label
LatexCommand label
name "fig:擦除类定义中的类型参数"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
有限制类型擦除
\end_layout

\begin_layout Standard
当类定义中的类型参数存在限制（上下界）时，在类型擦除中替换为类型参数的上界或者下界，比如形如<T extends Number>和<? extends
 Number>的类型参数被替换为Number，<? super Number>被替换为Object，参见
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
figurename
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:擦除类定义中的有限制类型参数"

\end_inset

。
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename /home/subaochen/git/blog/imgs/java/type-erasure-class-bounded.eps
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
擦除类定义中的有限制类型参数
\begin_inset CommandInset label
LatexCommand label
name "fig:擦除类定义中的有限制类型参数"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Section
擦除方法定义中的类型参数
\end_layout

\begin_layout Standard
擦除方法定义中的类型参数原则和擦除类定义中的类型参数是一样的，这里仅以擦除方法定义中的有限制类型参数为例，见
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
figurename
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:擦除泛型方法中的类型参数"

\end_inset

。
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename /home/subaochen/git/blog/imgs/java/type-erasure-method.eps
	width 90line%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
擦除泛型方法中的类型参数
\begin_inset CommandInset label
LatexCommand label
name "fig:擦除泛型方法中的类型参数"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
通过jad反编译后的结果可以对照一下？
\end_layout

\end_inset


\end_layout

\begin_layout Section
桥接方法和泛型的多态
\end_layout

\begin_layout Standard
考虑下面的代码：
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public interface Info<T> {
\end_layout

\begin_layout Plain Layout

    // just return var:-) 
\end_layout

\begin_layout Plain Layout

    T info(T var); 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

public class BridgeMethodTest implements Info<Integer> {
\end_layout

\begin_layout Plain Layout

    @Override
\end_layout

\begin_layout Plain Layout

    public Integer info(Integer var) {
\end_layout

\begin_layout Plain Layout

        return var;
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
按照我们之前类型擦除的经验，在擦除类型后的代码应该是这个样子的：
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public interface Info {
\end_layout

\begin_layout Plain Layout

    // just return var
\end_layout

\begin_layout Plain Layout

    Object info(Object var);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

public class BridgeMethodTest implements Info {
\end_layout

\begin_layout Plain Layout

    @Override
\end_layout

\begin_layout Plain Layout

    public Integer info(Integer var) {
\end_layout

\begin_layout Plain Layout

        return var;
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
但是，明显可以看出，这样擦除类型后的代码在语法上是错误的：BridgeMethodTest类中虽然存在一个info方法，但是和Info接口要求覆盖的info方法
不一致：参数类型不一致。在这种情况下，Java编译器会自动增加一个所谓的“桥接方法”（bridge method）来满足Java语法的要求，同时也保证了基于泛型
的多态能够有效。我们反编译一下BridgeMethodTest.class文件可以看到Java编译器到底是如何做的：
\end_layout

\begin_layout Standard
\begin_inset Box Shaded
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
$ javap BridgeMethodTest.class 
\end_layout

\begin_layout Plain Layout
Compiled from "BridgeMethodTest.java"
\end_layout

\begin_layout Plain Layout
public class BridgeMethodTest implements Info<java.lang.Integer> {
\end_layout

\begin_layout Plain Layout
public BridgeMethodTest();
\end_layout

\begin_layout Plain Layout
public java.lang.Integer info(java.lang.Integer);
\end_layout

\begin_layout Plain Layout
public java.lang.Object info(java.lang.Object);
\end_layout

\begin_layout Plain Layout
}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
可以看出，Java编译器在BridgeMethodTest中自动增加了两个方法：默认构造方法和参数为Object的info方法，参数为Object的info方法
就是“桥接方法”。如何理解“桥接”二字呢？我们进一步反编译BridgeMethodTest看一下：
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

// Decompiled by Jad v1.5.8e.
 Copyright 2001 Pavel Kouznetsov.
                                                          
\end_layout

\begin_layout Plain Layout

// Jad home page: http://www.geocities.com/kpdus/jad.html
\end_layout

\begin_layout Plain Layout

// Decompiler options: packimports(3) 
\end_layout

\begin_layout Plain Layout

// Source File Name:   BridgeMethodTest.java
\end_layout

\begin_layout Plain Layout

 
\end_layout

\begin_layout Plain Layout

 
\end_layout

\begin_layout Plain Layout

public class BridgeMethodTest
\end_layout

\begin_layout Plain Layout

    implements Info
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

 
\end_layout

\begin_layout Plain Layout

    public BridgeMethodTest()
\end_layout

\begin_layout Plain Layout

    {   
\end_layout

\begin_layout Plain Layout

    }   
\end_layout

\begin_layout Plain Layout

 
\end_layout

\begin_layout Plain Layout

    public Integer info(Integer integer)
\end_layout

\begin_layout Plain Layout

    {   
\end_layout

\begin_layout Plain Layout

        return integer;
\end_layout

\begin_layout Plain Layout

    }   
\end_layout

\begin_layout Plain Layout

 
\end_layout

\begin_layout Plain Layout

    public volatile Object info(Object obj)
\end_layout

\begin_layout Plain Layout

    {   
\end_layout

\begin_layout Plain Layout

        return info((Integer)obj);
\end_layout

\begin_layout Plain Layout

    }   
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
info(Object)方法通过调用子类的info(Integer)方法搭起了父类和子类的桥梁，也就是说，info(Object obj)这个方法起到了连接父类
和子类的作用，使得Java的多态在泛型情况下依然有效。
\end_layout

\begin_layout Standard
当然，我们在使用基于泛型的多态时不必过多的考虑“桥接方法”，Java编译器会帮我们打理好一切。
\end_layout

\begin_layout Standard
关于桥接方法的更多信息可以参考：
\begin_inset CommandInset href
LatexCommand href
name "JLS"
target "https://docs.oracle.com/javase/specs/"

\end_inset

的相关章节。
\end_layout

\begin_layout Section*
参考资料
\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "http://docs.oracle.com/javase/tutorial/java/generics/index.html"
target "http://docs.oracle.com/javase/tutorial/java/generics/index.html"

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "http://docs.oracle.com/javase/tutorial/extra/generics/index.html"
target "http://docs.oracle.com/javase/tutorial/extra/generics/index.html"

\end_inset


\end_layout

\end_body
\end_document
