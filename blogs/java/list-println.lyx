#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass ctex-article
\begin_preamble
%%%%%%%%%%%%%%%%%%                                                                                                                                                           

%中文断行
\XeTeXlinebreaklocale "zh"
\XeTeXlinebreakskip = 0pt plus 1pt 

% 标题左对齐
\usepackage[raggedright]{titlesec} 

% 页边距设置
\usepackage[top=1.2in,bottom=1.2in,left=1.2in,right=1in]{geometry}
% 页眉页脚设置
\usepackage{fancyhdr}
\pagestyle{fancy}
\fancyhf{}                                                  % 清空页眉页脚
\fancyhead[LE,RO]{\thepage}                                 % 偶数页左,奇数页右
\fancyhead[RE]{\leftmark}                                   % 偶数页右
\fancyhead[LO]{\rightmark}                                  % 奇数页左
\fancypagestyle{plain}{
    \fancyhf{}                                                  % 重定义plain页面样式
    \renewcommand{\headrulewidth}{0pt}
}


\usepackage{listings}
\usepackage{color}
\definecolor{hellgelb}{rgb}{1,1,0.85}
\definecolor{colKeys}{rgb}{0,0,1}
\definecolor{colIdentifier}{rgb}{0,0,0}
\definecolor{colComments}{rgb}{1,0,0}
\definecolor{colString}{rgb}{0,0.5,0}
\AtBeginDocument{\renewcommand\lstlistingname{代码清单}}

 
\lstset{%
        language=Java,%
        float=hbp,%
        basicstyle=\footnotesize\ttfamily,%
        identifierstyle=\color{colIdentifier},%
        keywordstyle=\color{colKeys},%
        stringstyle=\color{colString},%
        commentstyle=\itshape\color{colComments},%
        columns=fixed,
        tabsize=4,%
        frame=tb,% 顶部和底部加横线
        %frame=shadowbox,
        framerule=1pt,
        framexleftmargin=2em, % 行号包含在代码区域内
        extendedchars=false,%这一条命令可以解决代码跨页时，章节标题，页眉等汉字不显示的问题                                                                              
        showspaces=false,%
        showstringspaces=false,%
        numbers=left,%
        numberstyle=\tiny\ttfamily,%
        numbersep=1em,%
        breaklines=true,%
        breakindent=10pt,%
        backgroundcolor=\color{hellgelb},%
        breakautoindent=true,%
        captionpos=t,%
        xleftmargin=1em,%
        xrightmargin=\fboxsep,
        escapechar=|
} 

\usepackage{tikz}
\usepackage{ifthen}
\usepackage{coderemarks}
\usepackage{alltt}
%% Style commands
\newcommand{\func}[1]{\texttt{#1}}
\newcommand{\key}[1]{\texttt{#1}}
\newcommand{\type}[1]{\texttt{#1}}
\newcommand{\prog}[1]{\texttt{#1}}
\newcommand{\flag}[1]{\textit{#1}}
\newcommand{\dir}[1]{\texttt{#1}}
\newcommand{\file}[1]{\texttt{#1}}
\newcommand{\var}[1]{\texttt{#1}}
\newcommand{\rem}[1]{\texttt{\textit{#1}}}
\newcommand{\package}[1]{{\textit{#1}}}

% 用于显示终端命令的执行结果
\newenvironment{display}{\def\FrameCommand{\hskip\parindent}%%
\MakeFramed{\advance\hsize-\width\FrameRestore}%%
\vspace*{-2ex}\small\begin{alltt}}%
{\end{alltt}\vspace*{-2ex}\endMakeFramed}

\newenvironment{lbar}[1][]{%
\def\FrameCommand{\rightskip=\parindent\hskip\parindent\vrule width 1pt \hspace{10pt}}%
\MakeFramed{\rightskip=\parindent\advance\hsize-\width\FrameRestore\noindent\hskip-0.6ex}%
{%
\ifthenelse{\equal{#1}{}}{}{\hskip0.6ex\normalfont\myfamily\myheadseries{#1}\\\\}}%
}%
{\endMakeFramed}

% 显示一个向左的箭头
\newcommand{\coderemark}[1]{\sffamily\normalfont\qquad$\leftarrow \textit{\footnotesize #1}$}


%----------------------------------------------------------------------------------------
%	REMARK ENVIRONMENT
%----------------------------------------------------------------------------------------

\newenvironment{remark}{\par\vspace{10pt}\small % Vertical white space above the remark and smaller font size
\begin{list}{}{
\leftmargin=35pt % Indentation on the left
\rightmargin=25pt}\item\ignorespaces % Indentation on the right
\makebox[-2.5pt]{\begin{tikzpicture}[overlay]
\node[draw=ocre!60,line width=1pt,circle,fill=ocre!25,font=\sffamily\bfseries,inner sep=2pt,outer sep=0pt] at (-15pt,0pt){\textcolor{ocre}{R}};\end{tikzpicture}} % Orange R in a circle
\advance\baselineskip -1pt}{\end{list}\vskip5pt} % Tighter line spacing and white space after remark
\end_preamble
\use_default_options true
\begin_modules
logicalmkup
tcolorbox
note-inset
tip-inset
warning-inset
\end_modules
\maintain_unincluded_children false
\language chinese-simplified
\language_package default
\inputencoding utf8-plain
\fontencoding global
\font_roman "default" "新宋体"
\font_sans "default" "新宋体"
\font_typewriter "default" "新宋体"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts true
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format pdf4
\output_sync 0
\bibtex_command default
\index_command default
\float_placement tbph
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\boxbgcolor #dad3d7
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 2
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
println直接打印List对象的秘密
\end_layout

\begin_layout Standard
Java中遍历并打印一个List对象的最简单办法是直接调用System.out.println即可，比如：
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

List<Integer> list = Arrays.asList(1,2,3);
\end_layout

\begin_layout Plain Layout

System.out.println(list); // 打印出 [1, 2, 3]
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Java是如何做到这一点的呢？查看openjdk源代码得知，List类的层次结构如图
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:List类的层次结构"

\end_inset

所示。
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename /home/subaochen/git/blog/imgs/java/list-collection-hirarchy.eps
	width 60line%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
List类的层次结构
\begin_inset CommandInset label
LatexCommand label
name "fig:List类的层次结构"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
我们查看抽象类AbstractCollection的toString方法如下：
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

    public String toString() {
\end_layout

\begin_layout Plain Layout

        Iterator<E> it = iterator();
\end_layout

\begin_layout Plain Layout

        if (! it.hasNext())
\end_layout

\begin_layout Plain Layout

            return "[]";
\end_layout

\begin_layout Plain Layout

 
\end_layout

\begin_layout Plain Layout

        StringBuilder sb = new StringBuilder();
\end_layout

\begin_layout Plain Layout

        sb.append('[');
\end_layout

\begin_layout Plain Layout

        for (;;) {
\end_layout

\begin_layout Plain Layout

            E e = it.next();
\end_layout

\begin_layout Plain Layout

            sb.append(e == this ? "(this Collection)" : e); // 这里是一个递归的过程
\end_layout

\begin_layout Plain Layout

            if (! it.hasNext())
\end_layout

\begin_layout Plain Layout

                return sb.append(']').toString();
\end_layout

\begin_layout Plain Layout

            sb.append(',').append(' ');
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\end_inset


\end_layout

\begin_layout Standard
也就是说，对于任意List接口的实现类，都自动继承了AbstractCollection的toString方法，该方法遍历List中的所有元素并打印输出。
\end_layout

\begin_layout Standard
注意到AbstractCollection的toString方法中有一个递归的过程，比如下面的代码：
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

    public static void main(String[] args) {
\end_layout

\begin_layout Plain Layout

        List list = new ArrayList();
\end_layout

\begin_layout Plain Layout

        list.add(0);
\end_layout

\begin_layout Plain Layout

        list.add(1);
\end_layout

\begin_layout Plain Layout

        List list1 = new ArrayList();
\end_layout

\begin_layout Plain Layout

        list1.add(2);
\end_layout

\begin_layout Plain Layout

        list1.add(3);
\end_layout

\begin_layout Plain Layout

        list1.add(4);
\end_layout

\begin_layout Plain Layout

        list.add(list1);
\end_layout

\begin_layout Plain Layout

       System.out.println(list); // 输出[0, 1, [2, 3, 4]]
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
在AbstractCollection的toString方法的实现中，为了向后兼容的考虑使用Iterator接口。如果不考虑向后兼容，则可以使用foreach语
法，甚至Java8的lambda表达式来处理，代码更简洁。下面是使用foreach的AbstractColleciton.toString版本：
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public class MyList<E> extends ArrayList<E> {
\end_layout

\begin_layout Plain Layout

    public String toString() {
\end_layout

\begin_layout Plain Layout

        if(this.isEmpty()) return "[]";
\end_layout

\begin_layout Plain Layout

        StringBuilder sb = new StringBuilder();
\end_layout

\begin_layout Plain Layout

        sb.append("[");
\end_layout

\begin_layout Plain Layout

        for(E elem : this) {
\end_layout

\begin_layout Plain Layout

            sb.append(elem == this ? "(this Collection)" : elem).append(",
 ");
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        sb.delete(sb.length() - 2, sb.length()).append("]");
\end_layout

\begin_layout Plain Layout

        return sb.toString();
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
下面是使用lambda表达式的AbstractCollection.toString版本：
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

    public String toString( ) {
\end_layout

\begin_layout Plain Layout

        if(this.isEmpty()) return "[]";
\end_layout

\begin_layout Plain Layout

        StringBuilder sb = new StringBuilder();
\end_layout

\begin_layout Plain Layout

        sb.append("[");
\end_layout

\begin_layout Plain Layout

        this.stream().forEach(p->{sb.append(p); sb.append(", ");});
\end_layout

\begin_layout Plain Layout

        sb.delete(sb.length() - 2, sb.length()).append("]");
\end_layout

\begin_layout Plain Layout

        return sb.toString();
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\end_inset


\end_layout

\begin_layout Standard
测试用例：
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

    public static void main(String[] args) {
\end_layout

\begin_layout Plain Layout

        MyList<Integer> list = new MyList<Integer>();
\end_layout

\begin_layout Plain Layout

        list.add(1);
\end_layout

\begin_layout Plain Layout

        list.add(2);
\end_layout

\begin_layout Plain Layout

        System.out.println(list);
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Set，Map集合的遍历打印和List道理完全一致，可自行查看openjdk源代码。
\end_layout

\end_body
\end_document
