#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass ctex-article
\begin_preamble
\input{/home/subaochen/git/writing-common/article-preamble.tex}
\end_preamble
\use_default_options true
\begin_modules
logicalmkup
tcolorbox
note-inset
tip-inset
warning-inset
coderemarks
\end_modules
\maintain_unincluded_children false
\language chinese-simplified
\language_package default
\inputencoding utf8-plain
\fontencoding global
\font_roman "default" "新宋体"
\font_sans "default" "新宋体"
\font_typewriter "default" "新宋体"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts true
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format pdf4
\output_sync 0
\bibtex_command default
\index_command default
\float_placement tbph
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\boxbgcolor #dad3d7
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 2
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Java泛型中的无限制通配符
\end_layout

\begin_layout Section
问题导入
\begin_inset CommandInset label
LatexCommand label
name "sec:问题导入"

\end_inset


\end_layout

\begin_layout Standard
比如我们希望打印出任何List对象
\begin_inset Foot
status open

\begin_layout Plain Layout
事实上，System.out.println是可以直接打印任何List/Map对象的，参见：
\begin_inset CommandInset href
LatexCommand href
name "http://dz.sdut.edu.cn/blog/subaochen/2017/01/println-list-analyse/"
target "http://dz.sdut.edu.cn/blog/subaochen/2017/01/println-list-analyse/"

\end_inset


\end_layout

\end_inset

，可能会尝试下面的方法：
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public void printList(List<Object> list) {
\end_layout

\begin_layout Plain Layout

    for(Object e : list) {
\end_layout

\begin_layout Plain Layout

        System.out.println(e);
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
但是这个尝试是失败的，因为List<Integer>, List<String>等不是List<Object>的子类型，根据“子类替换原则”
\begin_inset Foot
status open

\begin_layout Plain Layout
参见：
\begin_inset CommandInset href
LatexCommand href
name "http://dz.sdut.edu.cn/blog/subaochen/2017/01/subtypes-substitutation/"
target "http://dz.sdut.edu.cn/blog/subaochen/2017/01/subtypes-substitutation/"

\end_inset


\end_layout

\end_inset

，List<Integer>, List<String>等就不能作为printList方法的参数，因而这样设计的printList方法只能接受List<Obje
ct>类型的参数，偏离了我们当初设定的目标。
\end_layout

\begin_layout Standard
通过以上的分析，问题就转化为：
\end_layout

\begin_layout Standard
\begin_inset Box ovalbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
什么是List<Integer>, List<String>, List<Object>等集合的父类型，也就是说，什么是任何List集合的父类型？
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
根据Java的泛型规则，我们有下面的四种选择
\begin_inset Note Note
status open

\begin_layout Plain Layout
which is the best practise?
\end_layout

\end_inset

，均能实现我们的目标：
\end_layout

\begin_layout Subsection
List<T extends Object>
\begin_inset CommandInset label
LatexCommand label
name "subsec:List<T-extends-Object>"

\end_inset


\end_layout

\begin_layout Standard
也就是说，printList方法可以设计为：
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public static <T extends Object> void printList(List<T> list){
\end_layout

\begin_layout Plain Layout

    for(T e : list) {
\end_layout

\begin_layout Plain Layout

        System.out.println(e);
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
实际上，这种写法和
\begin_inset CommandInset ref
LatexCommand formatted
reference "subsec:List<T>"

\end_inset

是一样的，即<T extends Object> 和 <T> 没有区别。
\end_layout

\begin_layout Standard
但是，下面的写法是错误的：
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public static <T> void printList(List<T extends Object> list){ // 语法错误，
 方法的泛型参数的类型必须是唯一确定的， 如果需要限定参数的上下界，需要在类型参数列表中限定。
\end_layout

\begin_layout Plain Layout

    for(T e : list) {
\end_layout

\begin_layout Plain Layout

        System.out.println(e);
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
跟类型擦除有关系？需要理解类型擦除的原理和方法
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
List<? extends Object>
\begin_inset CommandInset label
LatexCommand label
name "subsec:List<?-extends-Object>"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public static void printList(List<? extends Object> list){
\end_layout

\begin_layout Plain Layout

    for(Object e : list) {
\end_layout

\begin_layout Plain Layout

        System.out.println(e);
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
List<T>
\begin_inset CommandInset label
LatexCommand label
name "subsec:List<T>"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public static <T> void printList(List<T> list){
\end_layout

\begin_layout Plain Layout

    for(T e : list) {
\end_layout

\begin_layout Plain Layout

        System.out.println(e);
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
List<?>
\begin_inset CommandInset label
LatexCommand label
name "subsec:List<?>"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public static void printList(List<?> list){
\end_layout

\begin_layout Plain Layout

    for(Object e : list) {
\end_layout

\begin_layout Plain Layout

        System.out.println(e);
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Section
无限制通配符的最佳实践
\end_layout

\begin_layout Standard
可以看出，其实
\begin_inset CommandInset ref
LatexCommand nameref
reference "subsec:List<?-extends-Object>"

\end_inset

的写法相当于
\begin_inset CommandInset ref
LatexCommand nameref
reference "subsec:List<T-extends-Object>"

\end_inset

的简化，
\begin_inset CommandInset ref
LatexCommand nameref
reference "subsec:List<?>"

\end_inset

的写法其实相当于
\begin_inset CommandInset ref
LatexCommand nameref
reference "subsec:List<T>"

\end_inset

的简化。也就是说，在泛型方法中使用通配符，可以省略类型参数列表，这也是容易理解的：通配符?本意就表示符合条件的任意一个对象。比较一下另外一个通配符*，它表示符合
条件的所有对象的集合，似乎在Java泛型中没有什么场合需要通配符*
\begin_inset Foot
status open

\begin_layout Plain Layout
未来的Java版本中，泛型会加入通配符*的支持吗？maybe。
\end_layout

\end_inset

。
\end_layout

\begin_layout Standard
显然，在
\begin_inset CommandInset ref
LatexCommand formatted
reference "sec:问题导入"

\end_inset

中提出的问题，
\begin_inset CommandInset ref
LatexCommand formatted
reference "subsec:List<?>"

\end_inset

是最简洁易懂的方案，因此在编程实践中，推荐
\begin_inset CommandInset ref
LatexCommand formatted
reference "subsec:List<?>"

\end_inset

作为最佳实践。
\end_layout

\end_body
\end_document
