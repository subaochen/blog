#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass ctex-article
\begin_preamble
%%%%%%%%%%%%%%%%%%                                                                                                                                                           

%中文断行
\XeTeXlinebreaklocale "zh"
\XeTeXlinebreakskip = 0pt plus 1pt 

% 标题左对齐
%\usepackage[raggedright]{titlesec} 

% 页边距设置
\usepackage[top=1.2in,bottom=1.2in,left=1.2in,right=1in]{geometry}
% 页眉页脚设置
\usepackage{fancyhdr}
\pagestyle{fancy}
\fancyhf{}                                                  % 清空页眉页脚
\fancyhead[LE,RO]{\thepage}                                 % 偶数页左,奇数页右
\fancyhead[RE]{\leftmark}                                   % 偶数页右
\fancyhead[LO]{\rightmark}                                  % 奇数页左
\fancypagestyle{plain}{
    \fancyhf{}                                                  % 重定义plain页面样式
    \renewcommand{\headrulewidth}{0pt}
}


\usepackage{listings}
\usepackage{color}
\definecolor{hellgelb}{rgb}{1,1,0.85}
\definecolor{colKeys}{rgb}{0,0,1}
\definecolor{colIdentifier}{rgb}{0,0,0}
\definecolor{colComments}{rgb}{1,0,0}
\definecolor{colString}{rgb}{0,0.5,0}
\AtBeginDocument{\renewcommand\lstlistingname{代码清单}}



 
\lstset{%
        language=Java,%
        float=hbp,%
        basicstyle=\footnotesize\ttfamily,%
        identifierstyle=\color{colIdentifier},%
        keywordstyle=\color{colKeys},%
        stringstyle=\color{colString},%
        commentstyle=\itshape\color{colComments},%
        columns=fixed,
        tabsize=4,%
        frame=tb,% 顶部和底部加横线
        %frame=shadowbox,
        framerule=1pt,
        framexleftmargin=2em, % 行号包含在代码区域内                                                                           
        showspaces=false,%
        showstringspaces=false,%不显示代码字符串中间的空格标记
        numbers=left,%左侧显示行号
        numberstyle=\tiny\ttfamily,%
        numbersep=1em,%
        breaklines=true,% 对过长的代码自动换行
        breakindent=10pt,%
        backgroundcolor=\color{hellgelb},%
        breakautoindent=true,%
        %escapebegin=\begin{CJK*}{GBK}{hei},escapeend=\end{CJK*},
        aboveskip=1em, %代码块边框
        captionpos=t,%
        %% added by http://bbs.ctex.org/viewthread.php?tid=53451
        %fontadjust,
        xleftmargin=1em, xrightmargin=\fboxsep,%设定listing左右的空白
        %texcl=true,
        % 设定中文冲突，断行，列模式，数学环境输入，listing数字的样式
        extendedchars=false,columns=flexible,mathescape=true,
        escapechar=|
} 
\end_preamble
\use_default_options true
\begin_modules
theorems-bytype
theorems-chap-bytype
coderemarks
note-inset
tip-inset
warning-inset
logicalmkup
\end_modules
\maintain_unincluded_children false
\language chinese-simplified
\language_package default
\inputencoding utf8-plain
\fontencoding global
\font_roman "default" "新宋体"
\font_sans "default" "新宋体"
\font_typewriter "default" "新宋体"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts true
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format pdf4
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\boxbgcolor #d8daeb
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 2
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
泛型的PECS原则
\end_layout

\begin_layout Standard
泛型通配符的用法的确有一点点复杂，Joshua Bloch在著名的《Effective Java》中提出了PECS以帮助大家理解和记忆泛型通配符的用法，简洁有力
。PECS的意思是：Producer Extends, Consumer Super，即“读取时使用extends，写入时使用super”。下面我们分别讨论一下
。
\end_layout

\begin_layout Section
extends
\end_layout

\begin_layout Standard
我们以泛型List<? extends Number>为例，有如
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
figurename
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:List<?-extends-Number的类层次关系"

\end_inset

所示的类型层次关系。
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename /home/subaochen/git/blog/imgs/java/list-arraylist-generic.eps
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
List<? extends Number的类层次关系
\begin_inset CommandInset label
LatexCommand label
name "fig:List<?-extends-Number的类层次关系"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
根据子类替换原则
\begin_inset Foot
status open

\begin_layout Plain Layout
参见：http://dz.sdut.edu.cn/blog/subaochen/2017/01/subtypes-substitutation/
\end_layout

\end_inset

，下面的语句都是合法的：
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout

extends用法举例
\begin_inset CommandInset label
LatexCommand label
name "lis:extends用法举例"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

List<? extends Number> nums = new ArrayList<Number>();
\end_layout

\begin_layout Plain Layout

List<? extends Number> nums = new ArrayList<Integer>();
\end_layout

\begin_layout Plain Layout

List<? extends Number> nums = new ArrayList<Double>();
\end_layout

\end_inset


\end_layout

\begin_layout Standard
我们从读取和写入两个方面考察nums：
\end_layout

\begin_layout Subsection
读取
\end_layout

\begin_layout Standard
当调用nums.get(index)方法时，返回值的情形如下：
\end_layout

\begin_layout Itemize
可以返回Number类型，因为nums中的数据元素是Number或者Number的子类（Integer或者Double），均可以安全的向上转型为Number类型
。
\end_layout

\begin_layout Itemize
可以返回Object类型，因为Object是Number的父类，向上转型是安全的。
\end_layout

\begin_layout Itemize
不可以返回Integer，因为nums作为一个引用，可能指向一个List<Double>，如
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstlistingname
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "lis:extends用法举例"

\end_inset

的第3行所示。
\end_layout

\begin_layout Itemize
不可以返回Double，因为nums作为一个引用，可能指向一个List<Integer>，如
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstlistingname
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "lis:extends用法举例"

\end_inset

的第2行所示。
\end_layout

\begin_layout Standard
因此有如下的一般推论：
\end_layout

\begin_layout Corollary
List<? extends T>在读取时可以返回T或者T的父类对象，不可以返回T的子类对象。
\end_layout

\begin_layout Subsection
写入
\end_layout

\begin_layout Standard
当调用nums.add()方法写入数据到List<? extends Number>时，情形如下：
\end_layout

\begin_layout Itemize
不可以写入Number类型的对象。比如
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstlistingname
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "lis:extends用法举例"

\end_inset

的第2行，nums指向一个List<Integer>对象，只能添加Integer或者Integer的子类对象，而Number是Integer的父类。
\end_layout

\begin_layout Itemize
不可以写入Object类型的对象，因为nums可能指向一个List<Integer>类型的对象。
\end_layout

\begin_layout Itemize
不可以写入Integer类型的对象，因为nums可能指向一个List<Double>类型的对象。
\end_layout

\begin_layout Itemize
不可以写入Double类型的对象，因为nums可能指向一个List<Integer>类型的对象。
\end_layout

\begin_layout Standard
因此有如下的一般推论：
\end_layout

\begin_layout Corollary
List<? extends T>不允许写入任何对象，即List<? extends T>不能用于写入数据的场合。
\end_layout

\begin_layout Section
super
\end_layout

\begin_layout Standard
我们以泛型List<? super Number>为例，根据子类替换原则，以下的语句都是合法的：
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout

super用法举例
\begin_inset CommandInset label
LatexCommand label
name "lis:super用法举例"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

List<? super Integer> nums = new ArrayList<Integer>();
\end_layout

\begin_layout Plain Layout

List<? super Integer> nums = new ArrayList<Number>();
\end_layout

\begin_layout Plain Layout

List<? super Integer> nums = new ArrayList<Object>();
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
读取
\end_layout

\begin_layout Standard
当调用nums.get(index)方法时：
\end_layout

\begin_layout Itemize
无法保证结果是一个Integer，因为nums可能指向一个List<Object>或者List<Number>；
\end_layout

\begin_layout Itemize
无法保证结果是一个Number，因为nums可能指向一个List<Object>；
\end_layout

\begin_layout Itemize
结果可以是一个Object，但是我们无法获知其具体的类型。
\end_layout

\begin_layout Standard
因此有如下的一般推论：
\end_layout

\begin_layout Corollary
List<? super T>在读取时无法获知对象的具体类型，即List<? super T>不能用于读取数据的场合。
\end_layout

\begin_layout Subsection
写入
\end_layout

\begin_layout Standard
调用nums.add方法写入时，情形如下：
\end_layout

\begin_layout Itemize
可以写入Integer类型的对象，因为Integer是Integer、Number、Object的子类型。
\end_layout

\begin_layout Itemize
同样的，可以写入Integer的子类对象。
\end_layout

\begin_layout Itemize
不能写入Double类型的对象，因为nums可能指向一个List<Integer>。
\end_layout

\begin_layout Itemize
不能写入Number类型的对象，因为nums可能指向一个List<Integer>。
\end_layout

\begin_layout Itemize
不能写入Object类型的对象，因为nums可能指向一个List<Integer>。
\end_layout

\begin_layout Standard
因此有如下的一般推论：
\end_layout

\begin_layout Corollary
List<? super T>只允许写入T及T的子类对象。
\end_layout

\begin_layout Section
PECS
\end_layout

\begin_layout Standard
根据以上的讨论，PECS原则很自然就出来了：
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
在读取时使用extends，在写入是使用super，即Producer Extends, Consumer Super
\end_layout

\end_inset

。
\end_layout

\begin_layout Standard
PECS的一个著名例子是集合的复制：
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public class Collections { 
\end_layout

\begin_layout Plain Layout

  public static <T> void copy(List<? super T> dest, List<? extends T> src)
 
\end_layout

\begin_layout Plain Layout

  {
\end_layout

\begin_layout Plain Layout

      for (int i=0; i<src.size(); i++) 
\end_layout

\begin_layout Plain Layout

        dest.set(i,src.get(i)); 
\end_layout

\begin_layout Plain Layout

  } 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstlistingname
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "PECSTest.java"

\end_inset

可以考察你对PECS原则的理解程度，俗称烧脑测试。
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "/home/subaochen/git/java-tutorial-examples/generic/src/cn/edu/sdut/softlab/PECSTest.java"
lstparams "caption={PECSTest.java},label={PECSTest.java}"

\end_inset


\end_layout

\begin_layout Section*
参考资料
\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "Difference between <? super T> and <? extends T> in Java"
target "http://stackoverflow.com/questions/4343202/difference-between-super-t-and-extends-t-in-java"

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "How can I add to List<? extends Number> data structures?"
target "http://stackoverflow.com/questions/2776975/how-can-i-add-to-list-extends-number-data-structures/2777297#2777297"

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "Java Generics FAQ"
target "http://www.angelikalanger.com/GenericsFAQ/FAQSections/TypeArguments.html#FAQ103"

\end_inset


\end_layout

\end_body
\end_document
