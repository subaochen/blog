#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass ctex-article
\begin_preamble
%%%%%%%%%%%%%%%%%%                                                                                                                                                           

%中文断行
\XeTeXlinebreaklocale "zh"
\XeTeXlinebreakskip = 0pt plus 1pt 

% 标题左对齐
\usepackage[raggedright]{titlesec} 

% 页边距设置
\usepackage[top=1.2in,bottom=1.2in,left=1.2in,right=1in]{geometry}
% 页眉页脚设置
\usepackage{fancyhdr}
\pagestyle{fancy}
\fancyhf{}                                                  % 清空页眉页脚
\fancyhead[LE,RO]{\thepage}                                 % 偶数页左,奇数页右
\fancyhead[RE]{\leftmark}                                   % 偶数页右
\fancyhead[LO]{\rightmark}                                  % 奇数页左
\fancypagestyle{plain}{
    \fancyhf{}                                                  % 重定义plain页面样式
    \renewcommand{\headrulewidth}{0pt}
}


\usepackage{listings}
\usepackage{color}
\definecolor{hellgelb}{rgb}{1,1,0.85}
\definecolor{colKeys}{rgb}{0,0,1}
\definecolor{colIdentifier}{rgb}{0,0,0}
\definecolor{colComments}{rgb}{1,0,0}
\definecolor{colString}{rgb}{0,0.5,0}
\AtBeginDocument{\renewcommand\lstlistingname{代码清单}}

 
\lstset{%
        language=Java,%
        float=hbp,%
        basicstyle=\footnotesize\ttfamily,%
        identifierstyle=\color{colIdentifier},%
        keywordstyle=\color{colKeys},%
        stringstyle=\color{colString},%
        commentstyle=\itshape\color{colComments},%
        columns=fixed,
        tabsize=4,%
        frame=tb,% 顶部和底部加横线
        %frame=shadowbox,
        framerule=1pt,
        framexleftmargin=2em, % 行号包含在代码区域内
        extendedchars=false,%这一条命令可以解决代码跨页时，章节标题，页眉等汉字不显示的问题                                                                              
        showspaces=false,%
        showstringspaces=false,%
        numbers=left,%
        numberstyle=\tiny\ttfamily,%
        numbersep=1em,%
        breaklines=true,%
        breakindent=10pt,%
        backgroundcolor=\color{hellgelb},%
        breakautoindent=true,%
        captionpos=t,%
        xleftmargin=1em,%
        xrightmargin=\fboxsep,
        escapechar=|
} 


\usepackage{tikz}
\usepackage{ifthen}
\usepackage{alltt}
% Optional PGF libraries
\usepackage{pgflibraryarrows}
\usepackage{pgflibrarysnakes}

%% Style commands
\newcommand{\func}[1]{\texttt{#1}}
\newcommand{\key}[1]{\texttt{#1}}
\newcommand{\type}[1]{\texttt{#1}}
\newcommand{\prog}[1]{\texttt{#1}}
\newcommand{\flag}[1]{\textit{#1}}
\newcommand{\dir}[1]{\texttt{#1}}
\newcommand{\file}[1]{\texttt{#1}}
\newcommand{\var}[1]{\texttt{#1}}
\newcommand{\rem}[1]{\texttt{\textit{#1}}}
\newcommand{\package}[1]{{\textit{#1}}}

% 用于显示终端命令的执行结果
\newenvironment{display}{\def\FrameCommand{\hskip\parindent}%%
\MakeFramed{\advance\hsize-\width\FrameRestore}%%
\vspace*{-2ex}\small\begin{alltt}}%
{\end{alltt}\vspace*{-2ex}\endMakeFramed}

\newenvironment{lbar}[1][]{%
\def\FrameCommand{\rightskip=\parindent\hskip\parindent\vrule width 1pt \hspace{10pt}}%
\MakeFramed{\rightskip=\parindent\advance\hsize-\width\FrameRestore\noindent\hskip-0.6ex}%
{%
\ifthenelse{\equal{#1}{}}{}{\hskip0.6ex\normalfont\myfamily\myheadseries{#1}\\\\}}%
}%
{\endMakeFramed}

% 显示一个向左的箭头
\newcommand{\coderemark}[1]{\sffamily\normalfont\qquad$\leftarrow \textit{\footnotesize #1}$}
\end_preamble
\use_default_options true
\begin_modules
logicalmkup
multicol
notice
coderemarks
\end_modules
\maintain_unincluded_children false
\language chinese-simplified
\language_package default
\inputencoding utf8-plain
\fontencoding global
\font_roman "default" "新宋体"
\font_sans "default" "新宋体"
\font_typewriter "default" "新宋体"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts true
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format pdf4
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\boxbgcolor #dad3d7
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 2
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
deltaspike的JPA支持
\end_layout

\begin_layout Author
宿宝臣<subaochen@126.com>
\end_layout

\begin_layout Standard
下面的描述基于以下的运行环境：
\end_layout

\begin_layout Itemize
Java 8
\end_layout

\begin_layout Itemize
wildfly 10.0.0.Final
\end_layout

\begin_layout Itemize
Deltaspike 1.7.2-SNAPSHOT
\end_layout

\begin_layout Standard
完整的案例源代码已经PR到了deltaspike/deltaspike/examples/jpa-examples。
\end_layout

\begin_layout Section
环境配置
\end_layout

\begin_layout Standard
JPA环境主要涉及到两个方面，datasource的设置和如何方便的获取EntityManager。下面的设置方法针对JavaEE环境，这也是Deltaspik
e的主要使用场合。
\end_layout

\begin_layout Subsection
设置datasource
\end_layout

\begin_layout Standard
datasource的设置主要涉及到两个方面：容器管理的datasource和persistence.xml文件的编写。由于我们使用了wildfly已经自带的Ex
ampleDS，因此第一个方面（容器管理的datasource）在这里可以省略，如果需要配置容器管理的datasource，可以参考：
\begin_inset CommandInset href
LatexCommand href
name "jboss as 7配置postgresql数据源的方法"
target "http://dz.sdut.edu.cn/blog/subaochen/2013/08/jboss-as-7%E9%85%8D%E7%BD%AEpostgresql%E6%95%B0%E6%8D%AE%E6%BA%90%E7%9A%84%E6%96%B9%E6%B3%95/"

\end_inset

。
\end_layout

\begin_layout Standard
在项目的src/main/resources/META-INF目录创建文件persistence.xml，内容如下：
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
persistence.xml
\begin_inset CommandInset label
LatexCommand label
name "lis:persistence.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

<?xml version="1.0" encoding="UTF-8"?>
\end_layout

\begin_layout Plain Layout

<persistence version="2.0"
\end_layout

\begin_layout Plain Layout

             xmlns="http://java.sun.com/xml/ns/persistence" xmlns:xsi="http://www.w
3.org/2001/XMLSchema-instance"
\end_layout

\begin_layout Plain Layout

             xsi:schemaLocation="
\end_layout

\begin_layout Plain Layout

        http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistenc
e/persistence_2_0.xsd">
\end_layout

\begin_layout Plain Layout

    <persistence-unit name="primary" transaction-type="JTA">
\end_layout

\begin_layout Plain Layout

        <jta-data-source>java:jboss/datasources/ExampleDS</jta-data-source>
\end_layout

\begin_layout Plain Layout

        <class>org.apache.deltaspike.example.Article</class>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        <properties>
\end_layout

\begin_layout Plain Layout

            <property name="hibernate.hbm2ddl.auto" value="create" />
\end_layout

\begin_layout Plain Layout

            <property name="hibernate.show_sql" value="true" />
\end_layout

\begin_layout Plain Layout

        </properties>
\end_layout

\begin_layout Plain Layout

    </persistence-unit>
\end_layout

\begin_layout Plain Layout

</persistence>
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
这里的要点是：
\end_layout

\begin_layout Itemize
persistence-unit的名字在这个例子中并不重要，因为本例中只有一个persistence-unit，当我们@Produces EntityManag
erFactory的时候，自然就只能从这个唯一的persistence-unit中获取相关信息。
\end_layout

\begin_layout Itemize
注意persistence-unit的transaction-type要设置为JTA，否则默认为RESOURCE_LOCAL，在程序中无法使用@Transact
ional来使用JPA的事务了。
\end_layout

\begin_layout Itemize
jta-data-source的内容要和$WILDFLY_HOME/standalone/configuration/standalone.xml文件中关于Exa
mpleDS的定义一致。
\end_layout

\begin_layout Itemize
这里使用了hibernate作为JPA provider，因此properties中设置了hibernate的相关属性。hibernate-hbm2ddl.aut
o属性值为create时，每次部署应用程序都会重新创建数据表，方便录入测试数据。其他可选值为create-drop,validate,update。
\end_layout

\begin_layout Itemize
注意jta-data-source/class的顺序，jta-data-source的定义在前，class的定义在后，如果弄反了不会报错，但是无法访问数据库（这
貌似是一个bug?）。
\end_layout

\begin_layout Standard
需要注意的是，网络上关于persistence.xml的格式五花八门，重点从以下几个方面鉴别你需要的格式：
\end_layout

\begin_layout Itemize
JPA的版本号，1.0? 2.0? 也就是persistence_2_0.xsd中的数字要注意一下。
\end_layout

\begin_layout Itemize
使用环境是JavaEE还是JavaSE？如果是JavaEE只能使用如
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:persistence.xml"

\end_inset

所示的容器管理的datasource，如果是JavaEE可以在persistence.xml中直接配置jdbc url/driver等属性，比如下面的配置写法只适
应于JavaSE环境：
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
<properties>
\end_layout

\begin_layout Plain Layout
<property name="hibernate.dialect" value="org.hibernate.dialect.MySQL5Dialect"
 />
\end_layout

\begin_layout Plain Layout
<property name="hibernate.connection.driver_class" value="com.mysql.jdbc.Driver"
 />
\end_layout

\begin_layout Plain Layout
<property name="hibernate.connection.username" value="root" />
\end_layout

\begin_layout Plain Layout
<property name="hibernate.connection.password" value="root" />
\end_layout

\begin_layout Plain Layout
<property name="hibernate.connection.url" value="jdbc:mysql://localhost:3306/jpa?u
seUnicode=true&amp;characterEncoding=UTF-8" />
\end_layout

\begin_layout Plain Layout
<property name="hibernate.hbm2ddl.auto" value="update" /> 
\end_layout

\begin_layout Plain Layout
</properties>
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
获取EntityManager
\end_layout

\begin_layout Standard
使用CDI获取EntityManager也是区分JavaEE环境和JavaSE，具体参见deltaspike JPA module的说明：我们这里使用JavaE
E环境，因此编写Resources.java文件@Produces一个EntityManager，以便在其他组件中注入使用：
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
Resources.java
\begin_inset CommandInset label
LatexCommand label
name "lis:Resources.java"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

public class Resources
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

    //在这里不需要使用unitName进一步明确说明PersistenceUnit的来源，
\end_layout

\begin_layout Plain Layout

    //因为我们在persistence.xml中只定义了一个persistence-unit，
\end_layout

\begin_layout Plain Layout

    //系统自动采用了这唯一的一个persistence-unit。
\end_layout

\begin_layout Plain Layout

    @PersistenceUnit
\end_layout

\begin_layout Plain Layout

    private EntityManagerFactory entityManagerFactory;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    @Produces
\end_layout

\begin_layout Plain Layout

    @Default
\end_layout

\begin_layout Plain Layout

    @RequestScoped
\end_layout

\begin_layout Plain Layout

    public EntityManager create()
\end_layout

\begin_layout Plain Layout

    {
\end_layout

\begin_layout Plain Layout

        return this.entityManagerFactory.createEntityManager();
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    public void dispose(@Disposes @Default EntityManager entityManager)
\end_layout

\begin_layout Plain Layout

    {
\end_layout

\begin_layout Plain Layout

        if (entityManager.isOpen())
\end_layout

\begin_layout Plain Layout

        {
\end_layout

\begin_layout Plain Layout

            entityManager.close();
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    @Produces
\end_layout

\begin_layout Plain Layout

    @RequestScoped
\end_layout

\begin_layout Plain Layout

    public FacesContext produceFacesContext()
\end_layout

\begin_layout Plain Layout

    {
\end_layout

\begin_layout Plain Layout

        return FacesContext.getCurrentInstance();
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
这样，我们就可以在事物逻辑处理代码中直接注入EntityManager了，比如在ArticleController中可以这样使用：
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

@Named
\end_layout

\begin_layout Plain Layout

@ViewScoped
\end_layout

\begin_layout Plain Layout

@Transactional
\end_layout

\begin_layout Plain Layout

public class ArticleController implements Serializable
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

    private Article article = new Article();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    @HttpParam("aid") 
\end_layout

\begin_layout Plain Layout

    @Inject
\end_layout

\begin_layout Plain Layout

    private String aid; // article id
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    @Inject
\end_layout

\begin_layout Plain Layout

    private EntityManager em;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    public Article findArticleById(Long id)
\end_layout

\begin_layout Plain Layout

    {
\end_layout

\begin_layout Plain Layout

        article = em.find(Article.class, id);
\end_layout

\begin_layout Plain Layout

        return article;
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    public String persist()
\end_layout

\begin_layout Plain Layout

    {
\end_layout

\begin_layout Plain Layout

        article.setDate(new Date());
\end_layout

\begin_layout Plain Layout

        em.merge(this.article);
\end_layout

\begin_layout Plain Layout

        facesContext.addMessage(null, new FacesMessage("article:" + article.getTit
le() + " persisted"));
\end_layout

\begin_layout Plain Layout

        return "persisted";
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

    ......
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
注意到，我们在persist方法汇总使用了em.merge，而不是常见的em.persist方法，这是因为我们使用了@ViewScoped，尤其是从list.xhtm
l跳转到add.xhtml编辑具体文章时，被编辑文章在保存时，文章对象已经detach了，因此需要使用EntityManger的merge方法把detached
 entity找回来。如果组件的生命周期使用@RequestScoped则无需考虑detached entity问题。
\end_layout

\begin_layout Section
需要进一步研究的问题
\end_layout

\begin_layout Subsection
页面的初始化方法
\end_layout

\begin_layout Standard
从文章列表list.xhtml点击edit链接跳转到add.xhtml页面时，需要在add.xhtml页面初始化articleController.article对象，
以便显示被编辑文章的初始内容。本例采用了JSF的viewAction来实现页面的初始化，是否有更“优雅”的方式初始化页面中涉及的组件对象呢？
\end_layout

\begin_layout Standard
一个思路是，设计一个叫做@PageAction的注解，将此注解和JSF生命周期的拦截器结合起来，即在JSF的合适生命周期调用使用@PageAction注解过的方
法初始化页面组件，比如这样的用法：
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
@PageAction(
\begin_inset Quotes eld
\end_inset

add.xhtml
\begin_inset Quotes erd
\end_inset

)
\end_layout

\begin_layout Plain Layout
public void initPage(){
\end_layout

\begin_layout Plain Layout
......
\end_layout

\begin_layout Plain Layout
}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
感觉这思路还不如直接使用JSF的ViewAction直观:-)
\end_layout

\begin_layout Subsection
如何使用@RequestScoped编辑文章？
\end_layout

\begin_layout Standard
在编辑文章时，由于article对象在保存时已经detach了，即显示和保存是分别由两个事务来完成的，因此@RequestScoped很难协调使得来自于两个事务
的Article对象，这是本例使用@ViewScoped的原因：当使用@ViewScoped时，容器维护了article对象在当前页面的状态，因此保存文章时只需
要merge进来被显示的article对象即可。也就是说，虽然article对象分别由两个事务处理（一个加载，一个保存），但是对象的状态是连续的。
\end_layout

\begin_layout Standard
有没有好的办法可以基于@RequestScoped实现文章的编辑呢？
\end_layout

\begin_layout Subsection
business logic需要分层设计吗？
\end_layout

\begin_layout Standard
本例中，所有的business logic都封装在单一层ArticleController，有没有必要分成Bean层和Service层呢？思考中.....
\end_layout

\end_body
\end_document
