#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass ctex-article
\begin_preamble
%%%%%%%%%%%%%%%%%%                                                                                                                                                           

%中文断行
\XeTeXlinebreaklocale "zh"
\XeTeXlinebreakskip = 0pt plus 1pt 

% 标题左对齐
%\usepackage[raggedright]{titlesec} 

% 页边距设置
\usepackage[top=1.2in,bottom=1.2in,left=1.2in,right=1in]{geometry}
% 页眉页脚设置
\usepackage{fancyhdr}
\pagestyle{fancy}
\fancyhf{}                                                  % 清空页眉页脚
\fancyhead[LE,RO]{\thepage}                                 % 偶数页左,奇数页右
\fancyhead[RE]{\leftmark}                                   % 偶数页右
\fancyhead[LO]{\rightmark}                                  % 奇数页左
\fancypagestyle{plain}{
    \fancyhf{}                                                  % 重定义plain页面样式
    \renewcommand{\headrulewidth}{0pt}
}


\usepackage{listings}
\usepackage{color}
\definecolor{hellgelb}{rgb}{1,1,0.85}
\definecolor{colKeys}{rgb}{0,0,1}
\definecolor{colIdentifier}{rgb}{0,0,0}
\definecolor{colComments}{rgb}{1,0,0}
\definecolor{colString}{rgb}{0,0.5,0}
\AtBeginDocument{\renewcommand\lstlistingname{代码清单}}



 
\lstset{%
        language=Java,%
        float=hbp,%
        basicstyle=\footnotesize\ttfamily,%
        identifierstyle=\color{colIdentifier},%
        keywordstyle=\color{colKeys},%
        stringstyle=\color{colString},%
        commentstyle=\itshape\color{colComments},%
        columns=fixed,
        tabsize=4,%
        frame=tb,% 顶部和底部加横线
        %frame=shadowbox,
        framerule=1pt,
        framexleftmargin=2em, % 行号包含在代码区域内                                                                           
        showspaces=false,%
        showstringspaces=false,%不显示代码字符串中间的空格标记
        numbers=left,%左侧显示行号
        numberstyle=\tiny\ttfamily,%
        numbersep=1em,%
        breaklines=true,% 对过长的代码自动换行
        breakindent=10pt,%
        backgroundcolor=\color{hellgelb},%
        breakautoindent=true,%
        %escapebegin=\begin{CJK*}{GBK}{hei},escapeend=\end{CJK*},
        aboveskip=1em, %代码块边框
        captionpos=t,%
        %% added by http://bbs.ctex.org/viewthread.php?tid=53451
        %fontadjust,
        xleftmargin=1em, xrightmargin=\fboxsep,%设定listing左右的空白
        %texcl=true,
        % 设定中文冲突，断行，列模式，数学环境输入，listing数字的样式
        extendedchars=false,columns=flexible,mathescape=true,
        escapechar=|
} 
\end_preamble
\use_default_options true
\begin_modules
theorems-bytype
theorems-chap-bytype
coderemarks
note-inset
tip-inset
warning-inset
logicalmkup
\end_modules
\maintain_unincluded_children false
\language chinese-simplified
\language_package default
\inputencoding utf8-plain
\fontencoding global
\font_roman "default" "新宋体"
\font_sans "default" "新宋体"
\font_typewriter "default" "新宋体"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts true
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format pdf4
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\boxbgcolor #d8daeb
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 2
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
子类型和子类型替换原则
\end_layout

\begin_layout Section
问题导入
\end_layout

\begin_layout Standard
在面向对象编程实践中，会经常遇到“向上转型”的类型转换，这是安全的，因此有了下面的
\begin_inset Flex Noun
status open

\begin_layout Plain Layout
“子类型替换原则”
\end_layout

\end_inset

：
\end_layout

\begin_layout Definition
在使用Java对象的地方，可以使用该对象的子类型替代之。
\end_layout

\begin_layout Definition
“子类型替换原则”是面向对象编程的“普适”原则，Java语言自然是支持的。用好“子类型替换原则”的关键是彻底了解“子类型”（subtype）是如何规定的，这样才
能自如的找到合适的子类型进行替换。但是每种面向对象编程语言对于“子类型”的定义方式可能有差别，因此在Java中要用好“子类型替换原则”，就需要了解Java语言的
“子类型”是如何规定的。
\end_layout

\begin_layout Section
Java语言子类型的3种情形
\end_layout

\begin_layout Subsection
子类
\begin_inset CommandInset label
LatexCommand label
name "subsec:子类"

\end_inset


\end_layout

\begin_layout Standard
这是最容易理解的“子类型”了，但是要注意区分这两个概念：“子类”（subclass）是指一个类的子类，即我们通过extends继承下来的类。“子类型”（subt
ype）要更宽泛一下，除了包括“子类”之外，还包括下面的两种类型。
\end_layout

\begin_layout Subsection
接口
\begin_inset CommandInset label
LatexCommand label
name "subsec:接口"

\end_inset


\end_layout

\begin_layout Standard
如果一个类实现了某个接口，则这个接口就是这个类的“子类型”（subtype）。如果一个类实现了多个接口，则这个类就拥有多个子类型。比如：
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public class Foo implements Bar1, Bar2, Bar3 {
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
我们可以说，Bar1, Bar2, Bar3都是Foo类的子类型，在任何使用Foo的地方，都可以使用Bar1或者Bar2,或者Bar3替代，比如：
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public void test (Foo foo) { ...
 }
\end_layout

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

Bar1 bar1 = new Foo();
\end_layout

\begin_layout Plain Layout

test(bar1);
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
范型中的子类型
\end_layout

\begin_layout Standard
这是子类型最复杂的部分，我们分以下几种情况讨论：
\end_layout

\begin_layout Itemize
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
类型参数相同时，子类型的判别规则参照子类和接口
\end_layout

\end_inset

。这其实就是子类和接口实现扩展到了范型而已，比如下例，MyList<E>是ArrayList<E>的子类型：
\begin_inset Newline newline
\end_inset


\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public class MyList<E> extends ArrayList<E> {...}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
通配符?是一切对象的父类型
\end_layout

\end_inset

。这里有个前提，即只是变化类型参数，比如：List<?>是List<Integer>、List<String>的父类型。
\end_layout

\begin_layout Itemize
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
Foo<? extends Bar>是所有Foo<ClassExtendsBar>的父类型
\end_layout

\end_inset

。比如List<? extends Number>是List<Integer>，List<Double>的父类型。
\end_layout

\begin_layout Itemize
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
类型参数不同且不使用通配符，不构成子类型关系
\end_layout

\end_inset

。比如List<Inteter>不是List<Number>的子类型，也不是Collection<Number>的子类型，尽管List是Collection的子
类型，Integer是Number的子类型。我们可以通过假设的方式证明这一点：假设Collection<Number>是List<Integer>的父类型，那么
有下面的悖论：
\begin_inset Newline newline
\end_inset


\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Collection<Number> c;
\end_layout

\begin_layout Plain Layout

List<Integer> list = Arrays.asList(1,2,3);
\end_layout

\begin_layout Plain Layout

c = list; // 编译错误！
\end_layout

\begin_layout Plain Layout

c.add(1.2); // 如果上面一行允许的话，则会导致我们可以向list中添加float/double类型的数据，这是不合理的。
\end_layout

\end_inset


\end_layout

\end_body
\end_document
