#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass ctex-article
\begin_preamble
%%%%%%%%%%%%%%%%%%                                                                                                                                                           

%中文断行
\XeTeXlinebreaklocale "zh"
\XeTeXlinebreakskip = 0pt plus 1pt 

% 标题左对齐
\usepackage[raggedright]{titlesec} 

% 页边距设置
\usepackage[top=1.2in,bottom=1.2in,left=1.2in,right=1in]{geometry}
% 页眉页脚设置
\usepackage{fancyhdr}
\pagestyle{fancy}
\fancyhf{}                                                  % 清空页眉页脚
\fancyhead[LE,RO]{\thepage}                                 % 偶数页左,奇数页右
\fancyhead[RE]{\leftmark}                                   % 偶数页右
\fancyhead[LO]{\rightmark}                                  % 奇数页左
\fancypagestyle{plain}{
    \fancyhf{}                                                  % 重定义plain页面样式
    \renewcommand{\headrulewidth}{0pt}
}


\usepackage{listings}
\usepackage{color}
\definecolor{hellgelb}{rgb}{1,1,0.85}
\definecolor{colKeys}{rgb}{0,0,1}
\definecolor{colIdentifier}{rgb}{0,0,0}
\definecolor{colComments}{rgb}{1,0,0}
\definecolor{colString}{rgb}{0,0.5,0}
\AtBeginDocument{\renewcommand\lstlistingname{代码清单}}

 
\lstset{%
        language=Java,%
        float=hbp,%
        basicstyle=\footnotesize\ttfamily,%
        identifierstyle=\color{colIdentifier},%
        keywordstyle=\color{colKeys},%
        stringstyle=\color{colString},%
        commentstyle=\itshape\color{colComments},%
        columns=fixed,
        tabsize=4,%
        frame=tb,% 顶部和底部加横线
        %frame=shadowbox,
        framerule=1pt,
        framexleftmargin=2em, % 行号包含在代码区域内
        extendedchars=false,%这一条命令可以解决代码跨页时，章节标题，页眉等汉字不显示的问题                                                                              
        showspaces=false,%
        showstringspaces=false,%
        numbers=left,%
        numberstyle=\tiny\ttfamily,%
        numbersep=1em,%
        breaklines=true,%
        breakindent=10pt,%
        backgroundcolor=\color{hellgelb},%
        breakautoindent=true,%
        captionpos=t,%
        xleftmargin=1em,%
        xrightmargin=\fboxsep,
        escapechar=|
} 


\usepackage{tikz}
\usepackage{ifthen}
\usepackage{alltt}
% Optional PGF libraries
\usepackage{pgflibraryarrows}
\usepackage{pgflibrarysnakes}

%% Style commands
\newcommand{\func}[1]{\texttt{#1}}
\newcommand{\key}[1]{\texttt{#1}}
\newcommand{\type}[1]{\texttt{#1}}
\newcommand{\prog}[1]{\texttt{#1}}
\newcommand{\flag}[1]{\textit{#1}}
\newcommand{\dir}[1]{\texttt{#1}}
\newcommand{\file}[1]{\texttt{#1}}
\newcommand{\var}[1]{\texttt{#1}}
\newcommand{\rem}[1]{\texttt{\textit{#1}}}
\newcommand{\package}[1]{{\textit{#1}}}

% 用于显示终端命令的执行结果
\newenvironment{display}{\def\FrameCommand{\hskip\parindent}%%
\MakeFramed{\advance\hsize-\width\FrameRestore}%%
\vspace*{-2ex}\small\begin{alltt}}%
{\end{alltt}\vspace*{-2ex}\endMakeFramed}

\newenvironment{lbar}[1][]{%
\def\FrameCommand{\rightskip=\parindent\hskip\parindent\vrule width 1pt \hspace{10pt}}%
\MakeFramed{\rightskip=\parindent\advance\hsize-\width\FrameRestore\noindent\hskip-0.6ex}%
{%
\ifthenelse{\equal{#1}{}}{}{\hskip0.6ex\normalfont\myfamily\myheadseries{#1}\\\\}}%
}%
{\endMakeFramed}

% 显示一个向左的箭头
\newcommand{\coderemark}[1]{\sffamily\normalfont\qquad$\leftarrow \textit{\footnotesize #1}$}
\end_preamble
\use_default_options true
\begin_modules
logicalmkup
multicol
notice
coderemarks
\end_modules
\maintain_unincluded_children false
\language chinese-simplified
\language_package default
\inputencoding utf8-plain
\fontencoding global
\font_roman 新宋体
\font_sans 新宋体
\font_typewriter 新宋体
\font_math auto
\font_default_family default
\use_non_tex_fonts true
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format pdf4
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\boxbgcolor #dad3d7
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 2
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
CDI的组件定位原则
\end_layout

\begin_layout Standard
在基于组件的开发模式中，组件的定位是一个根本性的问题，即当我们@Inject一个组件时，容器是根据什么原则寻找（定位）符合条件的组件的呢？
\end_layout

\begin_layout Standard
CDI的组件定位（查找）规则是：根据组件的
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
类型和组件的qualifier
\end_layout

\end_inset

联合查找符合条件的组件。这里涉及到两个问题：第一，组件的类型，我们知道一个组件可能存在多达4种类型；第二，组件的qualifier。如果组件明确定义了quali
fier（列表），则组件的qualifier列表就是定义的qualifier列表+@Any；如果组件没有定义任何qualifier，则组件拥有默认的qualif
ier：@Default。也就是说，组件至少有一个qualifier：@Default。
\end_layout

\begin_layout Standard
在容器定位组件时，会根据@Inject请求的组件类型和qualifier列表共同形成一个查询条件，容器会根据这个查询条件寻找符合条件的组件列表，即组件在定义时的
类型符合指定的类型，并且组件在定义时配置的qualifier包含了指定的查询qualifier列表，也就是说，
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
查询条件中的组件类型和qualifier列表必须是组件定义类型和qualifier列表的一个子集
\end_layout

\end_inset

，如图
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:请求组件时的类型和qualifier列表"

\end_inset

所示：
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename /home/subaochen/git/blog/imgs/java/bean-qualifiers-list.png
	width 80line%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
请求组件时的类型和qualifier列表
\begin_inset CommandInset label
LatexCommand label
name "fig:请求组件时的类型和qualifier列表"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
比如，我们假设一个组件定义如下：
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

@A @B @C 
\end_layout

\begin_layout Plain Layout

public class Bean extends BaseBean implements BeanInf {...}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
上面的定义中，组件Bean有4种类型：Bean，BaseBean，BeanInf，Object，组件的qualifier也有四个：@A，@B，@C和@Any。因
此组件Bean的定位组合就有如下的变化： 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

// 根据组件类型BeanInf和默认的qualifier：@Default联合定位组件，但是组件没有定义@Default这个qualifier
\end_layout

\begin_layout Plain Layout

@Inject BeanInf bean;
\end_layout

\begin_layout Plain Layout

// 和上面的语句等价
\end_layout

\begin_layout Plain Layout

@Inject @Default BeanInf bean;
\end_layout

\begin_layout Plain Layout

// 根据组件类型BeanInf和qualifier列表：@A，@Any联合定位组件
\end_layout

\begin_layout Plain Layout

@Inject @A BeanInf bean;
\end_layout

\begin_layout Plain Layout

// 和上面的语句等价
\end_layout

\begin_layout Plain Layout

@Inject @A @Any BeanInf bean;
\end_layout

\begin_layout Plain Layout

// 等价于@Inject @A @B @Any BeanInf bean
\end_layout

\begin_layout Plain Layout

@Inject @A @B BeanInf bean;
\end_layout

\begin_layout Plain Layout

@Inject @A @B @C BeanInf bean;
\end_layout

\end_inset


\end_layout

\begin_layout Standard
4种类型和4个qualifier的组合方式（和顺序无关）有：4x（4+6+4+1）=60种，这60种组合方式都可以用来定位组件，只要能够唯一的定位组件即可。
\end_layout

\begin_layout Standard
那么，在这60种组合方式中，哪种更合理呢？根据面向接口编程的原则，@Inject @A BeanInfo bean这样形式的注入是合理的选择，即通过接口的类型和
适当的qualifier唯一定位组件。
\end_layout

\end_body
\end_document
