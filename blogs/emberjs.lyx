#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass ctex-article-with-coderemarks
\begin_preamble
%%%%%%%%%%%%%%%%%%                                                                                                                                                           

%中文断行
\XeTeXlinebreaklocale "zh"
\XeTeXlinebreakskip = 0pt plus 1pt 

% 标题左对齐
\usepackage[raggedright]{titlesec} 

% 页边距设置
\usepackage[top=1.2in,bottom=1.2in,left=1.2in,right=1in]{geometry}
% 页眉页脚设置
\usepackage{fancyhdr}
\pagestyle{fancy}
\fancyhf{}                                                  % 清空页眉页脚
\fancyhead[LE,RO]{\thepage}                                 % 偶数页左,奇数页右
\fancyhead[RE]{\leftmark}                                   % 偶数页右
\fancyhead[LO]{\rightmark}                                  % 奇数页左
\fancypagestyle{plain}{
    \fancyhf{}                                                  % 重定义plain页面样式
    \renewcommand{\headrulewidth}{0pt}
}


\usepackage{listings}
\usepackage{color}
\definecolor{hellgelb}{rgb}{1,1,0.85}
\definecolor{colKeys}{rgb}{0,0,1}
\definecolor{colIdentifier}{rgb}{0,0,0}
\definecolor{colComments}{rgb}{1,0,0}
\definecolor{colString}{rgb}{0,0.5,0}
\AtBeginDocument{\renewcommand\lstlistingname{代码清单}}

 
\lstset{%
        language=Java,%
        float=hbp,%
        basicstyle=\footnotesize\ttfamily,%
        identifierstyle=\color{colIdentifier},%
        keywordstyle=\color{colKeys},%
        stringstyle=\color{colString},%
        commentstyle=\itshape\color{colComments},%
        columns=fixed,
        tabsize=4,%
        frame=tb,% 顶部和底部加横线
        %frame=shadowbox,
        framerule=1pt,
        framexleftmargin=2em, % 行号包含在代码区域内
        extendedchars=false,%这一条命令可以解决代码跨页时，章节标题，页眉等汉字不显示的问题                                                                              
        showspaces=false,%
        showstringspaces=false,%
        numbers=left,%
        numberstyle=\tiny\ttfamily,%
        numbersep=1em,%
        breaklines=true,%
        breakindent=10pt,%
        backgroundcolor=\color{hellgelb},%
        breakautoindent=true,%
        captionpos=t,%
        xleftmargin=1em,%
        xrightmargin=\fboxsep,
        escapechar=|
} 


\usepackage{tikz}
\usepackage{ifthen}
\usepackage{coderemarks}
\usepackage{alltt}
% Optional PGF libraries
\usepackage{pgflibraryarrows}
\usepackage{pgflibrarysnakes}

%% Style commands
\newcommand{\func}[1]{\texttt{#1}}
\newcommand{\key}[1]{\texttt{#1}}
\newcommand{\type}[1]{\texttt{#1}}
\newcommand{\prog}[1]{\texttt{#1}}
\newcommand{\flag}[1]{\textit{#1}}
\newcommand{\dir}[1]{\texttt{#1}}
\newcommand{\file}[1]{\texttt{#1}}
\newcommand{\var}[1]{\texttt{#1}}
\newcommand{\rem}[1]{\texttt{\textit{#1}}}
\newcommand{\package}[1]{{\textit{#1}}}

% 用于显示终端命令的执行结果
\newenvironment{display}{\def\FrameCommand{\hskip\parindent}%%
\MakeFramed{\advance\hsize-\width\FrameRestore}%%
\vspace*{-2ex}\small\begin{alltt}}%
{\end{alltt}\vspace*{-2ex}\endMakeFramed}

\newenvironment{lbar}[1][]{%
\def\FrameCommand{\rightskip=\parindent\hskip\parindent\vrule width 1pt \hspace{10pt}}%
\MakeFramed{\rightskip=\parindent\advance\hsize-\width\FrameRestore\noindent\hskip-0.6ex}%
{%
\ifthenelse{\equal{#1}{}}{}{\hskip0.6ex\normalfont\myfamily\myheadseries{#1}\\\\}}%
}%
{\endMakeFramed}

% 显示一个向左的箭头
\newcommand{\coderemark}[1]{\sffamily\normalfont\qquad$\leftarrow \textit{\footnotesize #1}$}
\end_preamble
\use_default_options true
\begin_modules
logicalmkup
tcolorbox
\end_modules
\maintain_unincluded_children false
\language chinese-simplified
\language_package default
\inputencoding utf8-plain
\fontencoding global
\font_roman 新宋体
\font_sans 新宋体
\font_typewriter 新宋体
\font_math auto
\font_default_family default
\use_non_tex_fonts true
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format pdf4
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\boxbgcolor #dad3d7
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 2
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
ember.js学习笔记
\end_layout

\begin_layout Standard
因为weld probe的前端使用了ember.js，还是有必要了解一下ember.js框架是如何帮助实现单页面应用（SPA）的。emberjs的文档写的非常好，建
议初学者顺序阅读
\begin_inset CommandInset href
LatexCommand href
name "https://guides.emberjs.com/"
target "https://guides.emberjs.com/"

\end_inset

。
\end_layout

\begin_layout Section
安装
\end_layout

\begin_layout Standard
如果还没有安装nodejs，需要首先从
\begin_inset CommandInset href
LatexCommand href
name "http://nodejs.org"
target "http://nodejs.org"

\end_inset

下载最新的稳定版或者LTS版本安装nodejs。如果debian/ubuntu自己带的nodejs版本较低，也建议安装最新的nodejs。
\end_layout

\begin_layout Standard
\begin_inset Box Shaded
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
$ npm install -g ember-cli@beta
\end_layout

\end_inset


\end_layout

\begin_layout Section
emberjs快速入门
\end_layout

\begin_layout Subsection
hello emberjs
\end_layout

\begin_layout Standard
\begin_inset Box Shaded
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
$ ember new hello-ember
\end_layout

\end_inset


\end_layout

\begin_layout Standard
如果执行ember new时提示：
\end_layout

\begin_layout Standard
\begin_inset Box Shaded
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Error creating new application.
 Removing generated directory `./hello-ember`
\end_layout

\begin_layout Plain Layout
EACCES: permission denied, mkdir '/home/subaochen/.npm/is-git-url/0.2.0'
\end_layout

\begin_layout Plain Layout
Error: EACCES: permission denied, mkdir '/home/subaochen/.npm/is-git-url/0.2.0'
\end_layout

\begin_layout Plain Layout
at Error (native)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
就需要仔细检查.npm目录下的文件和目录是否权限有问题。
\end_layout

\begin_layout Standard
因为要从网络下载一些模块，创建ember应用要求有良好的网络连接，否则就需要辛苦和耐心了。
\end_layout

\begin_layout Standard
进入hello-ember执行：
\end_layout

\begin_layout Standard
\begin_inset Box Shaded
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
$ ember serve
\end_layout

\end_inset


\end_layout

\begin_layout Standard
然后访问http://localhost:4200，第一个ember应用就这样跑起来了！见图
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:welcome-to-ember"

\end_inset

：
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename /home/subaochen/git/blog/imgs/ember_welcome.pdf
	width 80line%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
welcome to ember
\begin_inset CommandInset label
LatexCommand label
name "fig:welcome-to-ember"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
定义路由
\end_layout

\begin_layout Standard
比如希望通过/langs显示语言列表，可以这样定义路由处理逻辑：
\end_layout

\begin_layout Standard
\begin_inset Box Shaded
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
$ ember generate route langs
\end_layout

\begin_layout Plain Layout
installing route
\end_layout

\begin_layout Plain Layout
create app/routes/langs.js
\end_layout

\begin_layout Plain Layout
create app/templates/langs.hbs
\end_layout

\begin_layout Plain Layout
updating router
\end_layout

\begin_layout Plain Layout
add route langs
\end_layout

\begin_layout Plain Layout
installing route-test
\end_layout

\begin_layout Plain Layout
create tests/unit/routes/langs-test.js
\end_layout

\end_inset


\end_layout

\begin_layout Standard
指令的执行结果已经说的很清楚了，总共有四处改变：
\end_layout

\begin_layout Enumerate
在routes增加一个langs.js文件
\end_layout

\begin_layout Enumerate
在templates增加一个langs.hbs文件
\end_layout

\begin_layout Enumerate
在router.js中增加了langs的映射（updating router）
\end_layout

\begin_layout Enumerate
创建了langs路由的测试用例
\end_layout

\begin_layout Standard
此时访问http://localhost:4200/langs，看到的还是图
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:welcome-to-ember"

\end_inset

的样子：我们还没有在langs.hbs创建任何内容呢。
\end_layout

\begin_layout Subsection
使用模板
\end_layout

\begin_layout Standard
下面修改一下langs路由对应的模板：langs.hbs：
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout

langs.hbs
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

{{outlet}}                   
\end_layout

\begin_layout Plain Layout

<h2>list of languages</h2>    
\end_layout

\end_inset


\end_layout

\begin_layout Standard
访问http://localhost:4200/langs，立刻发现新添加的内容显示出来了，如图
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:修改模板langs.hbs后的浏览器输出"

\end_inset

所示：
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename /home/subaochen/git/blog/imgs/ember_add_route.pdf
	width 80line%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
修改模板langs.hbs后的浏览器输出
\begin_inset CommandInset label
LatexCommand label
name "fig:修改模板langs.hbs后的浏览器输出"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
然后如下修改routes/langs.js：
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout

lang.js
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

import Ember from 'ember';
\end_layout

\begin_layout Plain Layout

     
\end_layout

\begin_layout Plain Layout

  export default Ember.Route.extend({
\end_layout

\begin_layout Plain Layout

      model(){
\end_layout

\begin_layout Plain Layout

          return ['zh-CN','en-US','C'];
\end_layout

\begin_layout Plain Layout

      } 
\end_layout

\begin_layout Plain Layout

  }); 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
再在langs.hbs中展示从model获得的内容：
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
langs.hbs
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

{{outlet}}            
\end_layout

\begin_layout Plain Layout

<h2>list of languages</h2>
\end_layout

\begin_layout Plain Layout

<ul>                  
\end_layout

\begin_layout Plain Layout

{{#each model as |lang|}}
\end_layout

\begin_layout Plain Layout

  <li>{{lang}}</li>                                                    
                                                                       
    
\end_layout

\begin_layout Plain Layout

{{/each}}             
\end_layout

\begin_layout Plain Layout

</ul> 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
立刻，浏览器展示了我们在langs.js中定义的语言列表
\begin_inset Foot
status open

\begin_layout Plain Layout
在route中直接返回供页面使用的数据应该不是一个好的设计风格，应该使用model类和模板绑定数据
\end_layout

\end_inset

，如图所示：
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename /home/subaochen/git/blog/imgs/ember_template_langs.pdf
	width 80line%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
修改模板和langs.js后的浏览器输出
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
使用组件
\end_layout

\begin_layout Standard
如果列出语言这个功能在多处用到，就有必要设计为一个组件（component）：
\end_layout

\begin_layout Standard
\begin_inset Box Shaded
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
$ ember generate component list-items
\end_layout

\begin_layout Plain Layout
version: 2.3.0-beta.2
\end_layout

\begin_layout Plain Layout
installing component
\end_layout

\begin_layout Plain Layout
create app/components/list-items.js
\end_layout

\begin_layout Plain Layout
create app/templates/components/list-items.hbs
\end_layout

\begin_layout Plain Layout
installing component-test
\end_layout

\begin_layout Plain Layout
create tests/integration/components/list-items-test.js
\end_layout

\end_inset


\end_layout

\begin_layout Standard
指令的执行结果已经说的很清楚了，下面修改一下list-items.hbs：
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout

list-items.hbs
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

<h2>{{title}}</h2>
\end_layout

\begin_layout Plain Layout

<ul>                                                                   
                                                                       
    
\end_layout

\begin_layout Plain Layout

{{#each items as |item|}}
\end_layout

\begin_layout Plain Layout

  <li>{{item}}</li>
\end_layout

\begin_layout Plain Layout

{{/each}}
\end_layout

\begin_layout Plain Layout

</ul>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
然后在langs.hbs模板使用list-items.hbs组件：
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout

langs.hbs
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

{{outlet}}
\end_layout

\begin_layout Plain Layout

{{list-items title="List of Languages" items=model}}   
\end_layout

\end_inset


\end_layout

\begin_layout Standard
浏览器的结果是一样的。
\end_layout

\begin_layout Section
emberjs核心概念
\end_layout

\begin_layout Standard
借用emberjs官网的一张图说明emberjs的核心概念和处理流程：
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename /home/subaochen/git/blog/imgs/ember-core-concepts.png
	lyxscale 60
	width 80line%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
emberjs核心概念和流程
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Section
定义路由
\end_layout

\begin_layout Section
界面
\end_layout

\begin_layout Section
部署ember应用
\end_layout

\begin_layout Section
小结
\end_layout

\begin_layout Standard
由于emberjs是基于路由的事件处理，emberjs特别适合于RESTful编程实践。
\end_layout

\end_body
\end_document
