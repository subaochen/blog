#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass ctex-article
\begin_preamble
%%%%%%%%%%%%%%%%%%                                                                                                                                                           

%中文断行
\XeTeXlinebreaklocale "zh"
\XeTeXlinebreakskip = 0pt plus 1pt 

% 标题左对齐，如果开启，会造成pdf文件的标题没有中文化处理
\usepackage[raggedright]{titlesec} 

% 页边距设置
\usepackage[top=1.2in,bottom=1.2in,left=1.2in,right=1in]{geometry}
% 页眉页脚设置
\usepackage{fancyhdr}
\pagestyle{fancy}
\fancyhf{}                                                  % 清空页眉页脚
\fancyhead[LE,RO]{\thepage}                                 % 偶数页左,奇数页右
\fancyhead[RE]{\leftmark}                                   % 偶数页右
\fancyhead[LO]{\rightmark}                                  % 奇数页左
\fancypagestyle{plain}{
    \fancyhf{}                                                  % 重定义plain页面样式
    \renewcommand{\headrulewidth}{0pt}
}


\usepackage{listings}
\usepackage{color}
\definecolor{hellgelb}{rgb}{1,1,0.85}
\definecolor{colKeys}{rgb}{0,0,1}
\definecolor{colIdentifier}{rgb}{0,0,0}
\definecolor{colComments}{rgb}{1,0,0}
\definecolor{colString}{rgb}{0,0.5,0}
\AtBeginDocument{\renewcommand\lstlistingname{代码清单}}

 
\lstset{%
        language=Java,%
        float=hbp,%
        basicstyle=\footnotesize\ttfamily,%
        identifierstyle=\color{colIdentifier},%
        keywordstyle=\color{colKeys},%
        stringstyle=\color{colString},%
        commentstyle=\itshape\color{colComments},%
        columns=fixed,
        tabsize=4,%
        frame=tb,% 顶部和底部加横线
        %frame=shadowbox,
        framerule=1pt,
        framexleftmargin=2em, % 行号包含在代码区域内
        extendedchars=false,%这一条命令可以解决代码跨页时，章节标题，页眉等汉字不显示的问题                                                                              
        showspaces=false,%
        showstringspaces=false,%
        numbers=left,%
        numberstyle=\tiny\ttfamily,%
        numbersep=1em,%
        breaklines=true,%
        breakindent=10pt,%
        backgroundcolor=\color{hellgelb},%
        breakautoindent=true,%
        captionpos=t,%
        xleftmargin=1em,%
        xrightmargin=\fboxsep,
        escapechar=`
} 
\end_preamble
\use_default_options true
\begin_modules
tcolorbox
\end_modules
\maintain_unincluded_children false
\language chinese-simplified
\language_package default
\inputencoding utf8-plain
\fontencoding global
\font_roman 新宋体
\font_sans 新宋体
\font_typewriter 新宋体
\font_math auto
\font_default_family default
\use_non_tex_fonts true
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format pdf4
\output_sync 0
\bibtex_command default
\index_command default
\float_placement H
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\boxbgcolor #58414b
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 2
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
了解ThreadLocal
\end_layout

\begin_layout Section
问题的提出
\end_layout

\begin_layout Standard
并发编程（多线程）之所以复杂，一个很重要的原因是多个线程之间需要协作（通讯），即在线程之间共享数据
\begin_inset CommandInset citation
LatexCommand cite
key "java-concurrency-in-practice"

\end_inset

。如果多个线程之间完全没有数据交互，那么多线程编程和单线程编程并没有多大差别。本文介绍了ThreadLocal
\begin_inset CommandInset citation
LatexCommand cite
key "threadlocal-api-java8"

\end_inset

如何实现对线程共享对象的保护。
\end_layout

\begin_layout Standard
注：本文示例代码地址：http://github.com/subaochen/ThreadLocalTutorial
\end_layout

\begin_layout Section
没有保护的线程共享变量
\end_layout

\begin_layout Standard
先看一个例子：
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "/home/subaochen/git/ThreadLocalTutorial/src/main/java/cn/edu/sdut/softlab/threadlocaltutorial/UnsafeThreadTest.java"
lstparams "caption={没有保护措施的线程共享变量},label={unsafeThread}"

\end_inset


\end_layout

\begin_layout Standard
在这里，sum是主线程的一个变量，此变量在创建的10个线程中都会用到，我们看一下输出结果：
\end_layout

\begin_layout Standard
\begin_inset Box Shaded
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
$ mvn clean package exec:exec -PunsafeThreadTest
\end_layout

\begin_layout Plain Layout
[INFO] --- exec-maven-plugin:1.4.0:exec (default-cli) @ ThreadLocalTutorial
 ---
\end_layout

\begin_layout Plain Layout
unsafe thread 7:50
\end_layout

\begin_layout Plain Layout
unsafe thread 9:100
\end_layout

\begin_layout Plain Layout
unsafe thread 8:150
\end_layout

\begin_layout Plain Layout
unsafe thread 4:200
\end_layout

\begin_layout Plain Layout
unsafe thread 2:250
\end_layout

\begin_layout Plain Layout
unsafe thread 0:300
\end_layout

\begin_layout Plain Layout
unsafe thread 5:350
\end_layout

\begin_layout Plain Layout
unsafe thread 3:400
\end_layout

\begin_layout Plain Layout
unsafe thread 1:450
\end_layout

\begin_layout Plain Layout
unsafe thread 6:500
\end_layout

\end_inset


\end_layout

\begin_layout Standard
可以看出，由于主线程的sum变量是共享的，测试线程中的sum是相互影响的。
\end_layout

\begin_layout Section
受保护的线程共享变量
\end_layout

\begin_layout Standard
如果在子线程（测试线程）中要共享主线程的变量，但是希望每个子线程都像独立使用共享变量一样，就需要借助于ThreadLocal：
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "/home/subaochen/git/ThreadLocalTutorial/src/main/java/cn/edu/sdut/softlab/threadlocaltutorial/SafeThreadLocalTest.java"
lstparams "caption={受保护的线程共享变量},label={受保护的线程共享变量}"

\end_inset


\end_layout

\begin_layout Standard
执行一下看看：
\end_layout

\begin_layout Standard
\begin_inset Box Shaded
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
$ mvn clean package exec:exec -PsafeThreadTest
\end_layout

\begin_layout Plain Layout
[INFO] --- exec-maven-plugin:1.4.0:exec (default-cli) @ ThreadLocalTutorial
 ---
\end_layout

\begin_layout Plain Layout
safe thread 3:50
\end_layout

\begin_layout Plain Layout
safe thread 6:50
\end_layout

\begin_layout Plain Layout
safe thread 4:50
\end_layout

\begin_layout Plain Layout
safe thread 8:50
\end_layout

\begin_layout Plain Layout
safe thread 0:50
\end_layout

\begin_layout Plain Layout
safe thread 5:50
\end_layout

\begin_layout Plain Layout
safe thread 1:50
\end_layout

\begin_layout Plain Layout
safe thread 9:50
\end_layout

\begin_layout Plain Layout
safe thread 7:50
\end_layout

\begin_layout Plain Layout
safe thread 2:50
\end_layout

\end_inset


\end_layout

\begin_layout Standard
果然，虽然sum还是主线程的共享变量，但是子线程（测试线程）就像独立拥有sum一样，不再相互影响，这也就是ThreadLocal的本意：线程本地变量，即通过Th
readLocal保护的变量，就像是子线程的本地变量一样。
\end_layout

\begin_layout Section
ThreadLocal的实际应用：Weld
\begin_inset CommandInset label
LatexCommand label
name "sec:ThreadLocal的实际应用：Weld"

\end_inset


\end_layout

\begin_layout Standard
比如在weld-core中，http session是这样表达的：
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "/home/subaochen/git/weld-core/modules/web/src/main/java/org/jboss/weld/servlet/SessionHolder.java"
lstparams "caption={SessionHolder.java},label={SessionHolder.java}"

\end_inset


\end_layout

\begin_layout Standard
很明显，每个http请求需要保存自己的http session，这正是ThreadLocal的用武之地。
\end_layout

\begin_layout Section
总结
\end_layout

\begin_layout Standard
ThreadLocal通常用于保护线程的全局共享对象，即当其他线程使用此共享对象时，就像独立拥有此共享对象一样。比如在
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:ThreadLocal的实际应用：Weld"

\end_inset

中我们已经看到了，容器技术中大量使用ThreadLocal来提供场景（上下文，Context）保护和场景切换。
\end_layout

\begin_layout Standard
要注意的是，ThreadLocal的作用并不是同步（sychronized），同步的作用是其他线程分时共享一个对象，这和ThreadLocal所要达到的效果正好
相反。
\end_layout

\begin_layout Standard
\start_of_appendix
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "/home/subaochen/git/blog/blogs/references"
options "plain"

\end_inset


\end_layout

\end_body
\end_document
