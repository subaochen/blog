#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass ctex-article
\begin_preamble
\input{/home/subaochen/git/writing-common/article-preamble.tex}
\end_preamble
\use_default_options true
\begin_modules
theorems-bytype
theorems-chap-bytype
coderemarks
note-inset
tip-inset
warning-inset
logicalmkup
\end_modules
\maintain_unincluded_children false
\language chinese-simplified
\language_package default
\inputencoding utf8-plain
\fontencoding global
\font_roman "default" "新宋体"
\font_sans "default" "新宋体"
\font_typewriter "default" "新宋体"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts true
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format pdf4
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\boxbgcolor #d8daeb
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 2
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
约束布局
\end_layout

\begin_layout Standard
约束布局（ContraintLayout）是相对布局的升级版，配合最新的布局编辑器
\begin_inset Foot
status open

\begin_layout Plain Layout
Android Studio从2.3版本开始在布局编辑器中支持约束布局，写作本书时Android Studio 2.3已经发布，创建界面的默认布局管理器已经变为约束
布局。
\end_layout

\end_inset

（Layout Editor），约束布局堪称布局神器，完全不需要嵌套布局，只在布局编辑器中拖拖拉拉即可完成非常复杂的界面布局。不过，第一次使用约束布局，会发现布
局编辑器中有很多小图标可能让人困惑，让我们逐步揭开约束布局的神秘面纱。
\end_layout

\begin_layout Section
准备工作
\end_layout

\begin_layout Standard
首先需要检查一下Android Studio是否支持约束布局。打开SDK Manager，如
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
figurename
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:检查是否安装约束布局支持库"

\end_inset

所示，确保已经安装了ConstraintLayout For Android和Solver for ConstraintLayout两个支持库。
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../../../android-tutorial/imgs/ui/constraintlayout-precondition.png
	width 80line%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
检查是否安装约束布局支持库
\begin_inset CommandInset label
LatexCommand label
name "fig:检查是否安装约束布局支持库"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
基本概念
\end_layout

\begin_layout Standard
约束布局的要旨是通过相对位置定位一个控件。如果我们把界面看做一个平面坐标系（原点位于左上角），控件看做坐标系中的一个点，则坐标(x, y)即可以唯一定位到这个点
，如
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
figurename
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:平面坐标系中的点"

\end_inset

所示。
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement tbph
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../../../android-tutorial/imgs/ui/point-in-axis.eps
	width 40line%

\end_inset


\begin_inset Note Note
status open

\begin_layout Plain Layout
正式发布时改为环绕图形
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
平面坐标系中的点
\begin_inset CommandInset label
LatexCommand label
name "fig:平面坐标系中的点"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset

也就是说，在约束布局中，我们至少要设置两个“约束”才能唯一定位一个控件：横向距离参照物的间隔x和纵向距离参照物的间隔y。考虑在界面安放第一个控件的情形，则参照物
分别为界面的左边界和上边界，即我们安放第一个控件时，至少要设置这个控件距离上边界多远和距离左边界多远。如果不设置横向间距x，则控件默认靠最左边停靠；如果不设置纵
向间距y，则控件默认靠左上边停靠；可以想象到，如果两个方向的间距都不设置，则控件就跑到最左上角了。如果多个控件都没有设置两个方向的间距，那么这些控件就都挤在左上
角了。
\end_layout

\begin_layout Standard
Android Studio的布局编辑器提供了方便和直观的工具帮助我们快速设置约束条件。我们以按钮为例，如
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
figurename
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:控件的各种手柄"

\end_inset

所示，每一个控件在布局编辑器中均提供了以下的手柄或者按钮可供操作：
\end_layout

\begin_layout Description
约束手柄 在控件的四个方向都提供了约束手柄，这是约束布局中最重要的操作手柄，拖动约束手柄到“参照物”（比如边界或者其他控件的约束手柄）即可创建相应方向的约束关系
。
\end_layout

\begin_layout Description
调整手柄 用于调整控件的大小。参见
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
sectionname
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand vref
reference "subsec:改变控件的大小"

\end_inset

，并不建议直接拖动调整手柄来调整控件的大小。
\end_layout

\begin_layout Description
文字基线设置手柄 用来设置文字按照基线对齐，只有在文字相关控件中才有效。
\end_layout

\begin_layout Description
删除约束按钮 点击可删除该控件的所有约束。如果要删除单个约束，单击相应的约束手柄即可。
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../../../android-tutorial/imgs/ui/control-handlers.png
	width 60line%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
控件的各种手柄
\begin_inset CommandInset label
LatexCommand label
name "fig:控件的各种手柄"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
第一个控件：设置横向约束和纵向约束
\end_layout

\begin_layout Standard
有了以上的基础知识，现在我们尝试拖动一个按钮到编辑区，并分别拖动约束手柄到左边界和上边界建立这个按钮的横向和纵向约束，如
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
figurename
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:建立控件的横向和纵向约束"

\end_inset

所示，按钮距离左边界171dp，距离上边界63dp。设置了横向和纵向约束后，仍然可以拖动控件直观的修改约束值。
\end_layout

\begin_layout Standard
\begin_inset Flex Notice
status open

\begin_layout Plain Layout
请尝试运行程序，查看按钮是否在我们期望的位置显示出来？
\end_layout

\begin_layout Plain Layout
请尝试单击删除横向约束或者纵向约束，甚至删除所有约束，运行一下看看结果有什么不同？
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex Warning
status open

\begin_layout Plain Layout
在布局编辑器，甚至蓝图中看到的控件位置，未必就是控件的真实位置：如果控件的约束不完整，即如果缺少了横向或者纵向的约束，则控件在布局编辑器中的位置仅表示“设计位置
”（用来表明设计意图），真实位置和缺失的约束有关：如果缺失横向约束，则控件停靠左边；如果缺失纵向约束，则控件停靠上边。因此，如果发现控件的真实位置和设计位置不相
符，应该仔细检查控件是否缺少了必备的横向和纵向约束。
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../../../android-tutorial/imgs/ui/first-controller-x-y.png
	width 70line%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
建立控件的横向和纵向约束
\begin_inset CommandInset label
LatexCommand label
name "fig:建立控件的横向和纵向约束"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
第一个控件：设置水平居中
\end_layout

\begin_layout Standard
现在，我们尝试让第一个控件水平居中。方法很简单，分别拖放按钮左右两边的约束手柄到边界，按钮就自动水平居中了，如
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
figurename
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand vref
reference "fig:控件水平居中"

\end_inset

所示。
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../../../android-tutorial/imgs/ui/first-controller-h-center.png
	width 70line%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
控件水平居中
\begin_inset CommandInset label
LatexCommand label
name "fig:控件水平居中"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset

。布局编辑器很智能的猜测我们设置水平方向的两个约束，最大的可能性就是为了让控件水平居中，不是吗？注意到，在
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
figurename
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:检查是否安装约束布局支持库"

\end_inset

中，按钮左边距离边界的水平间距是使用绝对数字表示的，而在
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
figurename
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:控件水平居中"

\end_inset

中，按钮水平方向的间距形象的使用了“弹簧线”，表示可伸缩的长度，即水平间距随按钮的长度而变化，详情可参见
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
sectionname
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand vref
reference "subsec:第一个控件：使用观察器调整控件"

\end_inset

。另外，在弹簧线的两端还有一个数字“8”，这是margin
\begin_inset Note Note
status open

\begin_layout Plain Layout
需要译为中文吗？如何翻译?
\end_layout

\end_inset

的默认设置， 我们将在
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
sectionname
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand vref
reference "subsec:布局编辑器的工具栏"

\end_inset

详细介绍默认margin的设置方法。
\end_layout

\begin_layout Standard
同样的道理，拖放按钮上下两边的约束到边界，按钮会自动垂直居中。
\end_layout

\begin_layout Section
第一个控件：使用观察器调整控件
\begin_inset CommandInset label
LatexCommand label
name "subsec:第一个控件：使用观察器调整控件"

\end_inset


\end_layout

\begin_layout Standard
当选中一个控件时，在布局编辑器的右上角是该控件的“观察器”(inspector)，通过观察器可以方便的调整控件的wrap属性和bias属性
\begin_inset Note Note
status open

\begin_layout Plain Layout
如何翻译？
\end_layout

\end_inset

以及margin设置。首先看一下wrap属性的调整方法，如
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
figurename
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand vref
reference "fig:在观察器中调整控件的wrap属性"

\end_inset

所示。
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename ../../../android-tutorial/imgs/ui/wrap-content-in-inspector.eps
	width 30line%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
wrap-content情形
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset space \hfill{}
\end_inset


\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename ../../../android-tutorial/imgs/ui/fixed-in-inspector.eps
	width 30line%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
fixed固定宽度情形
\begin_inset CommandInset label
LatexCommand label
name "fig:fixed固定宽度情形"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset space \hfill{}
\end_inset


\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename ../../../android-tutorial/imgs/ui/wrap-constraint-in-inspector.eps
	width 30line%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
wrap-constraint情形
\begin_inset CommandInset label
LatexCommand label
name "fig:wrap-constraint情形"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
在观察器中调整控件的wrap属性
\begin_inset CommandInset label
LatexCommand label
name "fig:在观察器中调整控件的wrap属性"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
具体操作方式为，单击靠近操作手柄的弹簧线等可以在wrap-content（默认值）、fixed、match constraints三种wrap方式之间切换：
\end_layout

\begin_layout Description
\begin_inset Graphics
	filename ../../../android-tutorial/imgs/ui/wrap-content-icon.png
	scale 30

\end_inset

 wrap-content模式，即控件只占用尽量小的空间。
\end_layout

\begin_layout Description
\begin_inset Graphics
	filename ../../../android-tutorial/imgs/ui/fixed-icon.png
	scale 30

\end_inset

 fixed模式，即控件的横向尺寸是固定值。
\end_layout

\begin_layout Description
\begin_inset Graphics
	filename ../../../android-tutorial/imgs/ui/wrap-constraint-icon.png
	scale 30

\end_inset

 match-constraints模式，即控件根据约束条件尽量占有最大的空间，这和wrap-content是相反的含义。
\end_layout

\begin_layout Standard
bias属性的调整很直观，直接拖动滑动条即可，同时可以在设计器和蓝图中看到拖动的效果。当然改变控件的位置也可以直接在设计器界面拖动控件，但是通过拖动滑动条调整b
ias属性的好处是可以方便的单独调整一个方向的bias属性，不会无意中修改了另外一个方向的bias属性。
\end_layout

\begin_layout Standard
margin属性的设置也很直观，直接点击图中的数字即可输入新的margin值，或者从下拉菜单中选择，不再赘述。
\end_layout

\begin_layout Standard
\begin_inset Flex Notice
status open

\begin_layout Plain Layout
观察器的操作方式比较多，建议读者每次调整参数后，不仅仅通过蓝图或者设计器观察调整的效果，也通过模拟器运行app观察真实的运行效果，加深对观察器操作方式和效果的了
解。
\end_layout

\end_inset


\end_layout

\begin_layout Section
安放第二个控件
\end_layout

\begin_layout Standard
当我们在布局编辑器中安放好第一个控件后，安放第二个控件的策略就很明确了，此时存在两个参照物：第一个已经安放好的控件和整个屏幕。我们以第一个控件作为参照物为例，一
般有如下的布局方法：
\end_layout

\begin_layout Description
横向对齐 以横向顶部对齐为例，将两个控件顶部的两个约束手柄连接起来就可以了。同样的道理，也可以实现横行底部对齐和横向交叉对齐，如图
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
figurename
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:利用约束手柄横向对齐"

\end_inset

所示。当然，不要忘记了设置控件之间的横向间隔距离。此时，如果拖动第一个控件，会发现第二个控件也会随之移动.请认真体会横向对齐设置后，移动第二个控件时似乎会碰到“一
堵墙”，这就是横向对齐的效果。
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename ../../../android-tutorial/imgs/ui/h-top-alignment.eps
	width 30line%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
横向顶部对齐
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset space \hfill{}
\end_inset


\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename ../../../android-tutorial/imgs/ui/h-bottom-alignment.eps
	width 30line%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
横向底部对齐
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset space \hfill{}
\end_inset


\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename ../../../android-tutorial/imgs/ui/h-x-alignment.eps
	width 30line%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
横向交叉对齐
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
利用约束手柄横向对齐
\begin_inset CommandInset label
LatexCommand label
name "fig:利用约束手柄横向对齐"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Description
纵向对齐 纵向对齐的思路和横向对齐非常类似，只要把两个控件左右两边的约束手柄连接起来，两个控件就构成了纵向对齐，分为纵向左对齐、纵向右对齐和纵向交叉三种形式，不
再赘述。
\end_layout

\begin_layout Section
安放一组控件
\end_layout

\begin_layout Standard
如果要在水平方向均匀放置一组控件，约束布局怎么做呢？布局编辑器依然提供了非常人性化的操作模式，比如三个按钮的水平平均布局见
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
figurename
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:水平均匀安放三个按钮"

\end_inset

，操作步骤如下：
\end_layout

\begin_layout Enumerate
拖放三个按钮到编辑区。
\end_layout

\begin_layout Enumerate
设置中间按钮到上边界的间距为合适的值。
\end_layout

\begin_layout Enumerate
分别将左右两边按钮的顶部约束手柄和中间按钮的顶部约束手柄连接起来，这样三个按钮在水平方向就顶部对齐了。
\end_layout

\begin_layout Enumerate
同时选择三个按钮，点击鼠标右键并选择“Center Horizentally”菜单项，即实现了三个按钮横向均匀分布。点击
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
figurename
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:水平均匀安放三个按钮"

\end_inset

中
\begin_inset Graphics
	filename ../../../android-tutorial/imgs/ui/group-links-icon.png
	scale 40

\end_inset

图标，可以在三种平均分布模式之间切换，请读者自行体会其中的差别。
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../../../android-tutorial/imgs/ui/group-controllers-h-center.png
	width 60line%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
水平均匀安放三个按钮
\begin_inset CommandInset label
LatexCommand label
name "fig:水平均匀安放三个按钮"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
纵向平均安放一组控件的方法于此类似，不再赘述。
\end_layout

\begin_layout Section
改变控件的大小
\begin_inset CommandInset label
LatexCommand label
name "subsec:改变控件的大小"

\end_inset


\end_layout

\begin_layout Standard
约束布局中允许任意设置控件的大小，在布局编辑器中也提供了调整手柄用于设置控件大小，但是一般不要通过直接操作调整手柄来设置控件的绝对尺寸，建议通过如
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
sectionname
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand vref
reference "fig:在观察器中调整控件的wrap属性"

\end_inset

中所述的方法设置控件的相对尺寸。
\end_layout

\begin_layout Section
约束布局的局限性
\end_layout

\begin_layout Standard
约束布局很方便，能够减少界面设计的嵌套层次，大幅度降低界面设计的复杂度。但是，约束布局对于超过一屏的超长页面并不合适，至少目前的布局编辑器无法很好的支持超长页面
的设计。
\end_layout

\end_body
\end_document
